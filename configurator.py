import math
import copy
from openpyxl import Workbook
from openpyxl.styles import Font
from openpyxl.styles import Alignment
from openpyxl.styles import Border, Side
from openpyxl.styles import PatternFill





class Wall:

    def __init__(self, house, left_out, consists_from_short, num_of_frames, right_out):
        self.left_out = left_out
        self.consists_from_short = consists_from_short
        self.num_of_frames = num_of_frames
        self.right_out = right_out

        self.num_of_middle_racks = 0
        self.num_of_middle_racks_anchors = 0

        self.wall_number = 0

        self.left_panel = 0
        self.num_of_full_panels = 0
        self.right_panel = 0

        self.left_panel_down_angel = 0
        self.num_of_full_panels_down_angels = 0
        self.right_panel_down_angel = 0

        self.num_of_panel_down_angles_anchors = 0

        self.left_panel_screw = 0
        self.num_of_full_panels_screw = 0
        self.right_panel_screw = 0

        self.left_panel_hermetic = 0
        self.num_of_full_panels_hermetic = 0
        self.right_panel_hermetic = 0

        self.sealer = 0

        self.mastic = 0

        self.batten = {}

        for batten_type in house.specification["Состав комплекта нащельников"]["Характеристики горизонтальных нащельников"].keys():
            self.batten[batten_type] = {}
            self.batten[batten_type]["Левая парная стена по нащельнику этого типа"] = 0
            self.batten[batten_type]["Кол-во саморезов для левого нащельника этого типа"] = 0
            self.batten[batten_type]["Кол-во герметиков для левого нащельника этого типа"] = 0
            self.batten[batten_type]["Длина левого нащельника этого типа"] = 0
            self.batten[batten_type]["Кол-во саморезов для целых нащельников этого типа"] = 0
            self.batten[batten_type]["Кол-во герметиков для целых нащельников этого типа"] = 0
            self.batten[batten_type]["Кол-во целых нащельников этого типа"] = 0
            self.batten[batten_type]["Кол-во саморезов для правого нащельника этого типа"] = 0
            self.batten[batten_type]["Кол-во герметиков для правого нащельника этого типа"] = 0
            self.batten[batten_type]["Длина правого нащельника этого типа"] = 0
            self.batten[batten_type]["Правая парная стена по нащельнику этого типа"] = 0

        for batten_type in house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"].keys():
            self.batten[batten_type] = {}
            self.batten[batten_type]["Кол-во саморезов для целых нащельников этого типа"] = 0
            self.batten[batten_type]["Кол-во герметиков для целых нащельников этого типа"] = 0
            self.batten[batten_type]["Кол-во целых нащельников этого типа"] = 0
            self.batten[batten_type]["Кол-во саморезов для верхнего нащельника этого типа"] = 0
            self.batten[batten_type]["Кол-во герметиков для верхнего нащельника этого типа"] = 0
            self.batten[batten_type]["Длина верхнего нащельника этого типа"] = 0


        self.num_of_foam = 0
        self.gap = 0
        self.basement_panel_hight = 0

        self.count_wall_length_funcs = {}

        self.count_wall_length_funcs["Нащельник парапетный"] = self.up_battens_wall_length(house)
        self.count_wall_length_funcs["Нащельник цокольный"] = self.groundfloor_battens_wall_length(house)
        self.count_wall_length_funcs["Нащельник деформационный шов"] = self.deformed_battens_wall_length(house)
        self.count_wall_length_funcs["Нащельник п-образный"] = self.u_shaped_battens_wall_length(house)

        self.left_vertical_batten_type = ""
        if self.left_out:
            self.left_vertical_batten_type = "Нащельник угловой"
        else:
            self.left_vertical_batten_type = "Нащельник угловой внутренний"


    def u_shaped_battens_wall_length(self, house):
        wall_length = 0
        if self.left_out:
            wall_length += house.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["толщина"]
        else:
            wall_length += house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["зазор между рамами"]

        if self.consists_from_short:
            wall_length += self.num_of_frames * house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["ширина"]
        else:
            wall_length += self.num_of_frames * house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["длина"]

        wall_length += (self.num_of_frames - 1) * house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["зазор между рамами"]

        if self.right_out:
            wall_length += house.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["толщина"]
        else:
            wall_length += house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["зазор между рамами"]

        return wall_length

    def up_battens_wall_length(self, house):
        wall_length = 0
        if self.left_out:
            wall_length += (house.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["толщина"] +
                            house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"]["Нащельник угловой"]["выступ нащельника от панели"])
        else:
            wall_length += house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["зазор между рамами"]

        if self.consists_from_short:
            wall_length += self.num_of_frames * house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["ширина"]
        else:
            wall_length += self.num_of_frames * house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["длина"]

        wall_length += (self.num_of_frames - 1) * house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["зазор между рамами"]

        if self.right_out:
            wall_length += (house.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["толщина"] +
                            house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"]["Нащельник угловой"]["выступ нащельника от панели"])
        else:
            wall_length += house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["зазор между рамами"]

        return wall_length

    def deformed_battens_wall_length(self, house):
        wall_length = 0
        if self.left_out:
            wall_length -= (
                    house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"]["Нащельник угловой"]["ширина"] -
                    house.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["толщина"] - house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"]["Нащельник угловой"]["выступ нащельника от панели"])
        else:
            wall_length -= (house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"]["Нащельник угловой внутренний"]["ширина"] +
                            house.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["толщина"] +
                            house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"]["Нащельник угловой внутренний"]["выступ нащельника от панели"] -
                            house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["зазор между рамами"])

        if self.consists_from_short:
            wall_length += self.num_of_frames * house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["ширина"]
        else:
            wall_length += self.num_of_frames * house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["длина"]

        wall_length += (self.num_of_frames - 1) * house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["зазор между рамами"]

        if self.right_out:
            wall_length -= (
                    house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"]["Нащельник угловой"]["ширина"] -
                    house.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["толщина"] - house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"]["Нащельник угловой"]["выступ нащельника от панели"])
        else:
            wall_length -= (house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"]["Нащельник угловой внутренний"]["ширина"] +
                            house.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["толщина"] +
                            house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"]["Нащельник угловой внутренний"]["выступ нащельника от панели"] -
                            house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["зазор между рамами"])

        return wall_length

    def groundfloor_battens_wall_length(self, house):
        wall_length = 0
        if self.left_out:
            wall_length -= (
                    house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"]["Нащельник угловой"]["ширина"] -
                    house.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["толщина"] - house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"]["Нащельник угловой внутренний"]["выступ нащельника от панели"])
        else:
            wall_length -= (house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"]["Нащельник угловой внутренний"]["ширина"] +
                            house.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["толщина"] +
                            house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"]["Нащельник угловой внутренний"]["выступ нащельника от панели"] -
                            house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["зазор между рамами"])

        if self.consists_from_short:
            wall_length += self.num_of_frames * house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["ширина"]
        else:
            wall_length += self.num_of_frames * house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["длина"]

        wall_length += (self.num_of_frames - 1) * house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["зазор между рамами"]

        if self.right_out:
            wall_length -= (
                    house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"]["Нащельник угловой"]["ширина"] -
                    house.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["толщина"] - house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"]["Нащельник угловой"]["выступ нащельника от панели"])
        else:
            wall_length -= (house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"]["Нащельник угловой внутренний"]["ширина"] +
                            house.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["толщина"] +
                            house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"]["Нащельник угловой внутренний"]["выступ нащельника от панели"] -
                            house.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["зазор между рамами"])

        return wall_length

    def panel_output(self, house):
        if self.left_out:
            print("Заходит на левый внешний угол")
        else:
            print("Заходит на левый внутренний угол")
        print("Левая панель:", self.left_panel, "шт. = ", round(self.left_panel * house.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["ширина"]), "мм.")
        print("Целых панелей:", self.num_of_full_panels, "шт. = ", round(self.num_of_full_panels * house.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["ширина"]),
              "мм.")
        print("Правая панель:", self.right_panel, "шт. = ", round(self.right_panel * house.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["ширина"]), "мм.")
        print("Монтажных пен на эту стену:", self.num_of_foam, "шт. = ", round(self.gap), "мм. зазора")

    def horizontal_battens_output(self, batten_type, house):
        print("Номер этой стены:", self.wall_number)

        if self.left_out:
            print("Слева внешний угол")
        else:
            print("Слева внутренний угол")

        print("Номер парной по левому", batten_type, "стены",
              self.batten[batten_type]["Левая парная стена по нащельнику этого типа"])

        left_batten = self.batten[batten_type]["Длина левого нащельника этого типа"]

        print("Левый", batten_type, ":", left_batten, "шт. = ",
              round(left_batten * house.specification["Состав комплекта нащельников"]["Характеристики горизонтальных нащельников"][batten_type]["длина"]), "мм.")

        num_of_battens = self.batten[batten_type]["Кол-во целых нащельников этого типа"]

        print("Целых", batten_type, ":", num_of_battens, "шт. = ",
              round(num_of_battens * house.specification["Состав комплекта нащельников"]["Характеристики горизонтальных нащельников"][batten_type]["длина"]), "мм.")

        right_batten = self.batten[batten_type]["Длина правого нащельника этого типа"]

        print("Правый", batten_type, ":", right_batten, "шт. = ",
              round(right_batten * house.specification["Состав комплекта нащельников"]["Характеристики горизонтальных нащельников"][batten_type]["длина"]), "мм.")

        print("Номер парной по правому", batten_type, "стены",
              self.batten[batten_type]["Правая парная стена по нащельнику этого типа"])

        if self.right_out:
            print("Справа внешний угол")
        else:
            print("Справа внутренний угол")

    def vertical_battens_output(self, house):
        print("Номер этой стены:", self.wall_number)

        print("Тип нащельника левого угла стены:", self.left_vertical_batten_type)

        num_of_battens = self.batten[self.left_vertical_batten_type]["Кол-во целых нащельников этого типа"]

        print("Целых", self.left_vertical_batten_type, ":", num_of_battens, "шт. = ",
              round(num_of_battens * house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"][self.left_vertical_batten_type]["длина"]), "мм.")

        up_batten = self.batten[self.left_vertical_batten_type]["Длина верхнего нащельника этого типа"]

        print("Верхний", self.left_vertical_batten_type, ":", up_batten, "шт. = ",
              round(up_batten * house.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"][self.left_vertical_batten_type]["длина"]), "мм.")

        print()



class House:

    def add_wall_list_list(self, wall_list_list):
        public_len = 0
        for var_wall_list in wall_list_list:
            wall_list = []
            public_len += len(var_wall_list[1])
            for wall in var_wall_list[1]:
                wall_list.append(Wall(self, wall[0], wall[1], wall[2], wall[3]))
            self.walls_list_list.append((var_wall_list[0], wall_list))

        self.unic_numbers += "-" + str(len(wall_list_list)) + "-" + str(public_len)

    def __init__(self, frame_number, nodes_dic, connections_dic, basement_hight, need_down_frames):
        self.specification = {
            "Состав комплекта рам":
                {
                    "Рама универсальная": 0,
                    "Запас Рама универсальная": 0,
                    "Характеристики Рама универсальная": {
                        "длина": 6055,
                        "ширина": 2435,
                        "толщина": 200,
                        "зазор между рамами": 10,
                        "кол-во угловых стоек": 4,
                        "кол-во угловых стоек на одной стороне": 2,
                        "кол-во внешних средних стоек": 1,

                        "кол-во в": "шт.",
                        "артикул": "DHMC106-6-3-0/SB",
                        "себестоимость за единицу": 53037.8702,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 487.2,
                        "вес всех элементов": 0,
                    },

                    "Себестоимость комплекта": 0,
                    "Вес комплекта": 0,
                },

            "Состав комплекта панелей":
                {
                    "Панель стеновая": 0,
                    "Запас Панель стеновая": 1,
                    "Характеристики Панель стеновая": {
                        "длина": 3490,
                        "ширина": 1150,
                        "толщина": 100,
                        "минимальная длина крепления": 50,
                        "зазор на стыке": 20,
                        "минимальный желательный размер": 250,
                        "шаг сдвига": 5,
                        "минимальное крепление сверху": 40,
                        "минимальная высота цоколя": 300,
                        "кол-во пазов": 2,

                        "кол-во в": "шт.",
                        "артикул": "PS/V-B5-10P3FZ2/W/T11/W/T11-S100/0.40-S100/0.40/PRINT24-GLK/SP21-9003",
                        "себестоимость за единицу": 9041.034,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 39.65,
                        "вес всех элементов": 0,
                    },
                    "Панель цокольная": 0,
                    "Запас Панель цокольная": 1,
                    "Характеристики Панель цокольная": {
                        "длина": 3490,
                        "ширина": 1150,
                        "толщина": 100,
                        "минимальная длина крепления": 50,
                        "зазор на стыке": 20,
                        "минимальный желательный размер": 250,
                        "шаг сдвига": 5,
                        "минимальное крепление сверху": 40,
                        "минимальная высота цоколя": 300,
                        "кол-во пазов": 2,

                        "кол-во в": "шт.",
                        "артикул": "PS/V-B5-10P3FZ2/W/T11/W/T11-S100/0.40-S100/0.40/SP24-7016/SP21-9003",
                        "себестоимость за единицу": 8835,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 39.65,
                        "вес всех элементов": 0,
                    },

                    "Себестоимость комплекта": 0,
                    "Вес комплекта": 0,
                },

            "Состав комплекта нащельников":
                {
                    "Характеристики вертикальных нащельников":
                        {
                            "Нащельник угловой": {
                                "длина": 2500,
                                "ширина": 215,
                                "минимальная длина крепления": 250,
                                "выступ нащельника от панели": 45,
                                "кол-во прилеганий для герметика": 2,
                                "кол-во саморезов": 2,
                                "шаг крепления": 250,
                                "нахлест": 80,
                                "запас": 0.1,

                                "кол-во в": "шт.",
                                "артикул": "SE/V-OC-113-0.40/PLST-7016-(14*45*97*15*15*97*97*15*15*97*45*14)/2500",
                                "себестоимость за единицу": 1218.64,
                                "cебестоимость за все элементы": 0,
                                "вес за единицу": 4.6,
                                "вес всех элементов": 0,
                            },
                            "Нащельник угловой внутренний": {
                                "длина": 2500,
                                "ширина": 215,
                                "минимальная длина крепления": 250,
                                "выступ нащельника от панели": 45,
                                "кол-во прилеганий для герметика": 2,
                                "кол-во саморезов": 2,
                                "шаг крепления": 250,
                                "нахлест": 80,
                                "запас": 0.1,

                                "кол-во в": "шт.",
                                "артикул": "SE/V-OC-116-0.40/PLST-7016-(14*45*97*15*15*97*97*15*15*97*45*14)/2500",
                                "себестоимость за единицу": 1218.64,
                                "cебестоимость за все элементы": 0,
                                "вес за единицу": 4.552,
                                "вес всех элементов": 0,
                            },
                        },
                    "Характеристики горизонтальных нащельников":
                        {
                            "Нащельник парапетный": {
                                "длина": 2500,
                                "минимальная длина на углу": 315,
                                "минимальный желательный размер": 500,
                                "шаг сдвига": 10,
                                "кол-во прилеганий для герметика": 2,
                                "кол-во саморезов": 2,
                                "шаг крепления": 250,
                                "нахлест": 80,
                                "запас": 0.1,
                                "кол-во слоев в доме": 1,

                                "кол-во в": "шт.",
                                "артикул": "SE/V-EJ-115-0.40/PLST-7016-(20*45*140*15*15*140*150*45)/2500",
                                "себестоимость за единицу": 1226.95,
                                "cебестоимость за все элементы": 0,
                                "вес за единицу": 4.631,
                                "вес всех элементов": 0,
                            },
                            "Нащельник цокольный": {
                                "длина": 2500,
                                "минимальная длина на углу": 100,
                                "минимальный желательный размер": 500,
                                "шаг сдвига": 10,
                                "кол-во прилеганий для герметика": 0,
                                "кол-во саморезов": 1,
                                "шаг крепления": 250,
                                "нахлест": 80,
                                "запас": 0.1,
                                "кол-во слоев в доме": 1,

                                "кол-во в": "шт.",
                                "артикул": "SE/V-ZS-2-0.40/PLST-7016-(14*44*11)/2500",
                                "себестоимость за единицу": 173.02,
                                "cебестоимость за все элементы": 0,
                                "вес за единицу": 0.652,
                                "вес всех элементов": 0,
                            },
                            "Нащельник деформационный шов": {
                                "длина": 2500,
                                "минимальная длина на углу": 100,
                                "минимальный желательный размер": 500,
                                "шаг сдвига": 10,
                                "кол-во прилеганий для герметика": 2,
                                "кол-во саморезов": 2,
                                "шаг крепления": 250,
                                "нахлест": 80,
                                "запас": 0.1,
                                "кол-во слоев в доме": 1,

                                "кол-во в": "шт.",
                                "артикул": "SE/V-EJ-116-0.40/PLST-7016-(14*45*97*15*15*97*45*14)/2500",
                                "себестоимость за единицу": 535.14,
                                "cебестоимость за все элементы": 0,
                                "вес за единицу": 2.653,
                                "вес всех элементов": 0,
                            },
                            "Нащельник п-образный": {
                                "длина": 2500,
                                "минимальная длина на углу": 100,
                                "минимальный желательный размер": 500,
                                "шаг сдвига": 10,
                                "кол-во прилеганий для герметика": 0,
                                "кол-во саморезов": 2,
                                "шаг крепления": 250,
                                "нахлест": 80,
                                "запас": 0.05,
                                "кол-во слоев в доме": 2,

                                "кол-во в": "шт.",
                                "артикул": "SE/V-US-1-0.40/PLST-7016-(40*104*40)/2500",
                                "себестоимость за единицу": 424.24,
                                "cебестоимость за все элементы": 0,
                                "вес за единицу": 1.601,
                                "вес всех элементов": 0,
                        }
                    },
                    "Нащельник угловой": 0,
                    "Запас Нащельник угловой": 1,
                    "Нащельник угловой внутренний": 0,
                    "Запас Нащельник угловой внутренний": 1,
                    "Нащельник парапетный": 0,
                    "Запас Нащельник парапетный": 1,
                    "Нащельник цокольный": 0,
                    "Запас Нащельник цокольный": 1,
                    "Нащельник деформационный шов": 0,
                    "Запас Нащельник деформационный шов": 1,
                    "Нащельник п-образный": 0,
                    "Запас Нащельник п-образный": 1,

                    "Себестоимость комплекта": 0,
                    "Вес комплекта": 0,
                },
            "Состав комплекта кровли":
                {
                    "Пир-плита": 0,
                    "Запас Пир-плита": 0,
                    "Характеристики Пир-плита":
                    {
                        "длина": 3000,
                        "ширина": 1140,
                        "толщина": 100,
                        "кол-во пир-плит на длину рамы": 2,
                        "минимальная ширина крепления": 42.5,
                        "зазор при соединении через короткую сторону": 50,
                        "стандартный зазор": 20,

                        "кол-во в": "шт.",
                        "артикул": "PP/S-B4-100P3CZ1/FGts/FGts",
                        "себестоимость за единицу": 5700,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 14.364,
                        "вес всех элементов": 0,
                    },

                    "Себестоимость комплекта": 0,
                    "Вес комплекта": 0,
                },
            "Состав комплекта металлоконструкций":
                {
                    "Стойка угловая": 0,
                    "Запас Стойка угловая": 0,
                    "Характеристики Стойка угловая": {
                        "длина": 2950,
                        "ширина": 210,

                        "кол-во в": "шт.",
                        "артикул": "DHMC148-36-1-0",
                        "себестоимость за единицу": 5010.0371,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 50.41,
                        "вес всех элементов": 0,
                    },

                    "Стойка средняя": 0,
                    "Запас Стойка средняя": 0,
                    "Характеристики Стойка средняя": {
                        "длина": 2950,
                        "кол-во анкеров для крепления": 2,

                        "кол-во в": "шт.",
                        "артикул": "411-01-001-С",
                        "себестоимость за единицу": 1914.3401,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 13.2,
                        "вес всех элементов": 0,
                    },

                    "Профиль усиления": 1,
                    "Запас Профиль усиления": 0,
                    "Характеристики Профиль усиления": {

                        "кол-во в": "шт.",
                        "артикул": "411-01-002-С",
                        "себестоимость за единицу": 3149.024,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 21.25,
                        "вес всех элементов": 0,
                    },

                    "Стойка дверная правая": 1,
                    "Запас Стойка дверная правая": 0,
                    "Характеристики Стойка дверная правая": {
                        "длина": 2950,
                        "кол-во анкеров для крепления": 2,

                        "кол-во в": "шт.",
                        "артикул": "DHMC148-36-2-0",
                        "себестоимость за единицу": 3160.21,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 38.34,
                        "вес всех элементов": 0,
                    },

                    "Стойка дверная левая": 1,
                    "Запас Стойка дверная левая": 0,
                    "Характеристики Стойка дверная левая": {
                        "длина": 2950,
                        "кол-во анкеров для крепления": 2,

                        "кол-во в": "шт.",
                        "артикул": "DHMC148-36-3-0",
                        "себестоимость за единицу": 3160.21,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 38.34,
                        "вес всех элементов": 0,
                    },

                    "Вкладыш угловой": 0,
                    "Запас Вкладыш угловой": 1,
                    "Характеристики Вкладыш угловой": {
                        "кол-во на соединение": 2,
                        "запас": 4/48,

                        "кол-во в": "шт.",
                        "артикул": "DHMC972-15-0-0",
                        "себестоимость за единицу": 38.6776,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 0.2,
                        "вес всех элементов": 0,
                    },

                    "Пластина соединительная": 0,
                    "Запас Пластина соединительная": 1,
                    "Характеристики Пластина соединительная": {
                        "кол-во на угловой элемент": 1,
                        "кол-во на одну стойку угловую": 3,
                        "запас": 2/48,

                        "кол-во в": "шт.",
                        "артикул": "DHMC118-4-0-5",
                        "себестоимость за единицу": 57.7322,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 0.58,
                        "вес всех элементов": 0,
                    },

                    "Себестоимость комплекта": 0,
                    "Вес комплекта": 0,
                },
            "Состав комплекта монтажного":
                {
                    "Болт М12": 0,
                    "Запас Болт М12": 0,
                    "Характеристики Болт М12": {
                        "кол-во на пластину соединительную": 1,
                        "запас": 0.25,

                        "кол-во в": "шт.",
                        "артикул": "152-1013",
                        "себестоимость за единицу": 6.1986,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 0.07,
                        "вес всех элементов": 0,
                    },

                    "Винт М12": 0,
                    "Запас Винт М12": 0,
                    "Характеристики Винт М12": {
                        "кол-во на стойку угловую": 6,
                        "запас": 12/528,

                        "кол-во в": "шт.",
                        "артикул": "163-1196",
                        "себестоимость за единицу": 8.5982,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 0.045,
                        "вес всех элементов": 0,
                    },

                    "Гровер М12": 0,
                    "Запас Гровер М12": 0,
                    "Характеристики Гровер М12": {
                        "кол-во на один болт": 1,
                        "кол-во на один винт": 1,
                        "запас": 1/36,

                        "кол-во в": "шт.",
                        "артикул": "DHM0304",
                        "себестоимость за единицу": 0.71,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 0.003,
                        "вес всех элементов": 0,
                    },

                    "Гайка М12": 0,
                    "Запас Гайка М12": 0,
                    "Характеристики Гайка М12": {
                        "кол-во на один болт": 2,
                        "запас": 1/30,

                        "кол-во в": "шт.",
                        "артикул": "153-588",
                        "себестоимость за единицу": 2.126,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 0.016,
                        "вес всех элементов": 0,
                    },

                    "Саморез 5,5х135": 0,
                    "Запас Саморез 5,5х135": 0,
                    "Характеристики Саморез 5,5х135": {
                        "кол-во саморезов на верх панели": 3,
                        "кол-во саморезов на низ панели на раму": 3,
                        "кол-во саморезов на низ панели на уголок": 2,
                        "запас": 1/41,

                        "кол-во в": "шт.",
                        "артикул": "164-302",
                        "себестоимость за единицу": 6.9666,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 0.025,
                        "вес всех элементов": 0,
                    },

                    "Саморез 4,2х13": 0,
                    "Запас Саморез 4,2х13": 0,
                    "Характеристики Саморез 4,2х13": {
                        "запас": 0.2,

                        "кол-во в": "шт.",
                        "артикул": "164-880",
                        "себестоимость за единицу": 0.3330,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 0.001,
                        "вес всех элементов": 0,
                    },

                    "Пена монтажная": 0,
                    "Запас Пена монтажная": 0,
                    "Характеристики Пена монтажная": {
                        "объем": 37000000,
                        "запас": 0,

                        "кол-во в": "шт.",
                        "артикул": "МПРК15",
                        "себестоимость за единицу": 291.67,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 0.75,
                        "вес всех элементов": 0,
                    },

                    "Герметик": 0,
                    "Запас Герметик": 0,
                    "Характеристики Герметик": {
                        "объем": 300000,
                        "длина шва": 300000 / (3.38 * 3.38),
                        "запас": 0,

                        "кол-во в": "шт.",
                        "артикул": "1398-94",
                        "себестоимость за единицу": 146.94,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 0.04,
                        "вес всех элементов": 0,
                    },

                    "Лента уплотнительная": 0,
                    "Запас Лента уплотнительная": 0,
                    "Характеристики Лента уплотнительная": {
                        "запас": 0,

                        "кол-во в": "пог. м.",
                        "артикул": "4167-14",
                        "себестоимость за единицу": 11.3,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 0.062,
                        "вес всех элементов": 0,
                    },

                    "Уплотнитель зазоров": 0,
                    "Запас Уплотнитель зазоров": 0,
                    "Характеристики Уплотнитель зазоров": {
                        "нахлест": 300,
                        "запас": 0,

                        "кол-во в": "пог. м.",
                        "артикул": "DHMCU4",
                        "себестоимость за единицу": 122.6,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 0.5775,
                        "вес всех элементов": 0,
                    },

                    "Мастика": 0,
                    "Запас Мастика": 0,
                    "Характеристики Мастика": {
                        "кол-во мм из одного кг": 1973,
                        "запас": 0,

                        "кол-во в": "кг.",
                        "артикул": "1697-43",
                        "себестоимость за единицу": 113.33,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 1,
                        "вес всех элементов": 0,
                    },

                    "Штрих-корректор RAL 9003": 1,
                    "Запас Штрих-корректор RAL 9003": 0,
                    "Характеристики Штрих-корректор RAL 9003": {
                        "запас": 0,

                        "кол-во в": "шт.",
                        "артикул": "TUP-RAL9003",
                        "себестоимость за единицу": 24.1262,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 0,
                        "вес всех элементов": 0,
                    },

                    "Штрих-корректор RAL 8003": 1,
                    "Запас Штрих-корректор RAL 8003": 0,
                    "Характеристики Штрих-корректор RAL 8003": {
                        "запас": 0,

                        "кол-во в": "шт.",
                        "артикул": "TUP-RAL8003cz",
                        "себестоимость за единицу": 37.622,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 0,
                        "вес всех элементов": 0,
                    },

                    "Штрих-корректор RAL 7016": 1,
                    "Запас Штрих-корректор RAL 7016": 0,
                    "Характеристики Штрих-корректор RAL 7016": {
                        "запас": 0,

                        "кол-во в": "шт.",
                        "артикул": "TUP-RAL7016",
                        "себестоимость за единицу": 27.1879,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 0,
                        "вес всех элементов": 0,
                    },

                    "Краска аэрозольная RAL 7016": 2,
                    "Запас Краска аэрозольная RAL 7016": 0,
                    "Характеристики Краска аэрозольная RAL 7016": {
                        "кол-во рам на один баллон": 4,
                        "запас": 0,

                        "кол-во в": "шт.",
                        "артикул": "154-158-116",
                        "себестоимость за единицу": 183.61,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 0.27,
                        "вес всех элементов": 0,
                    },

                    "Уголок опорный": 0,
                    "Запас Уголок опорный": 0,
                    "Характеристики Уголок опорный": {
                        "длина": 400,
                        "кол-во анкеров для крепления": 2,
                        "запас": 1 / 12,

                        "кол-во в": "шт.",
                        "артикул": "DHMC138-0-0-0",
                        "себестоимость за единицу": 232.75,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 3.69,
                        "вес всех элементов": 0,
                    },

                    "Анкер М12": 0,
                    "Запас Анкер М12": 0,
                    "Характеристики Анкер М12": {
                        "запас": 4/52,

                        "кол-во в": "шт.",
                        "артикул": "DHA",
                        "себестоимость за единицу": 21.5115,
                        "cебестоимость за все элементы": 0,
                        "вес за единицу": 0.106,
                        "вес всех элементов": 0,
                    },

                    "Себестоимость комплекта": 0,
                    "Вес комплекта": 0,
                },
        }

        self.financial_characteristics = {
            "Вес всех комплектов": 0,
            "Себестоимость всех комплектов": 0,

            "Административно-хозяйственные расходы": 0.12,
            "Коммерческие расходы": 0.03,
            "Расходы Управляющей компании": 0.04,
            "Полная себестоимость всех комплектов": 0,
            "Норма прибыли": 0.2095,
            "НДС": 0.20,
            "Максимальная скидка": 0.07,
            "Розничная наценка": 0.11,
            "Дилерская цена с максимальной скидкой (с НДС)": 0,
            "Дилерская цена без скидки (с НДС)": 0,
            "Розничная цена (с НДС)": 0,

            "Форматированный вес всех комплектов": 0,
            "Форматированная розничная цена (с НДС)": 0,
        }
        self.house_name = str(round((frame_number *
                           self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["длина"] *
                           self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["ширина"] / 1000000)))

        self.unic_numbers = (str(nodes_dic["одиночные соединения"]) + str(nodes_dic["двойные соединения"]) +
                            str(nodes_dic["тройные соединения"]) + str(nodes_dic["четверные соединения"]))
        self.unic_numbers += "-" + str(connections_dic["длинные соединения"]) + str(connections_dic["короткие соединения"])
        self.unic_numbers += "-" + str(math.ceil(basement_hight))


        self.frame_number = frame_number
        self.nodes_dic = nodes_dic
        self.connections_dic = connections_dic
        self.walls_list_list = []
        self.need_down_frames = False

        self.basement_hight = basement_hight
        self.need_down_frames = need_down_frames


    def create_excel_specification_file(self):
        number_of_rows = 0
        # Создаем новую книгу Excel
        wb = Workbook()
        # Активируем первый лист в книге
        ws = wb.active
        file_name = "Домокомплект EFFECT Ultra " + self.house_name
        if self.need_down_frames:
            file_name += " на рамно-свайном фундаменте "
        else:
            file_name += " на бетонном фундаменте "

        file_name += self.unic_numbers

        # Меняем название активного листа
        ws.title = "Спецификация"

        headers_size = 13
        black_side_thin = Side(border_style="thin", color="000000")
        black_side_thick = Side(border_style="thick", color="000000")

        thick_border = Border(left=black_side_thick, right=black_side_thick, top=black_side_thick, bottom=black_side_thick)
        thin_border = Border(left=black_side_thin, right=black_side_thin, top=black_side_thin, bottom=black_side_thin)
        no_val_border = Border(top=black_side_thin, bottom=black_side_thin)

        orange_fill = PatternFill(start_color="FFCC99", end_color="FFCC99", fill_type="solid")

        init_headers = ["Название:",
                   "Полная себестоимость всех комплектов (без НДС) в р.:",
                   "Дилерская цена без скидки  (с НДС) в р.:", "Максимальная скидка в %:",
                   "Дилерская цена с максимальной скидкой (с НДС) в р.:", "Розничная наценка в %:",
                   "Розничная цена (с НДС) в р.:", "Вес всех комплектов в кг.:",
                   "Себестоимость всех комплектов (без НДС) в р.:"]

        public_set_headers = ["", "", "", "", "",
                       "", "", "Вес комплекта в кг.:", "Себестоимость комплекта (без НДС) в р.:"]


        elem_set_headers = ["Название:", "Артикул:", "Кол-во:", "Запас:", "Ед. измерения:",
                       "Вес ед. в кг.:", "Цена за ед. в р.:", "Общий вес в кг.:",
                       "Общая себестоимость (без НДС) в р.:"]

        max_number_of_columns = len(init_headers)
        ws.append(init_headers)
        number_of_rows += 1


        for col in range(1, len(init_headers) + 1):
            cell = ws.cell(row=number_of_rows, column=col)
            cell.font = Font(bold=True, size=headers_size)
            cell.border = thick_border
            cell.fill = orange_fill

        for i in range(1, len(init_headers) + 1):
            cell = ws.cell(row=1, column=i)
            if "Название:" in init_headers[i - 1]:
                ws.column_dimensions[cell.column_letter].width = len("Домокомплект EFFECT Ultra " + self.house_name) - 10
            else:
                if len(init_headers[i - 1]) >= 40:
                    ws.column_dimensions[cell.column_letter].width = len(init_headers[i - 1]) - 25
                else:
                    ws.column_dimensions[cell.column_letter].width = len(init_headers[i - 1]) - 10

        for i in range(1, len(elem_set_headers) + 1):
            cell = ws.cell(row=1, column=i)
            if "Артикул:" in elem_set_headers[i - 1]:
                ws.column_dimensions[cell.column_letter].width = 25




        ws.append(["Домокомплект EFFECT Ultra " + self.house_name,
                   self.financial_characteristics["Полная себестоимость всех комплектов"],
                   self.financial_characteristics["Дилерская цена без скидки (с НДС)"],
                   self.financial_characteristics["Максимальная скидка"],
                   self.financial_characteristics["Дилерская цена с максимальной скидкой (с НДС)"],
                   self.financial_characteristics["Розничная наценка"],
                   self.financial_characteristics["Розничная цена (с НДС)"],
                   self.financial_characteristics["Вес всех комплектов"],
                   self.financial_characteristics["Себестоимость всех комплектов"]])
        number_of_rows += 1

        for i in range(1, len(init_headers) + 1):
            cell = ws.cell(row=number_of_rows, column=i)
            if "р." in init_headers[i - 1]:
                cell = ws.cell(row=number_of_rows, column=i)
                cell.number_format = "#,##0.00 ₽"

        for i in range(1, len(init_headers) + 1):
            cell = ws.cell(row=number_of_rows, column=i)
            if "%" in init_headers[i - 1]:
                cell = ws.cell(row=number_of_rows, column=i)
                cell.number_format = "0.00%"

        for i in range(1, len(init_headers) + 1):
            cell = ws.cell(row=number_of_rows, column=i)
            if "кг." in init_headers[i - 1]:
                cell = ws.cell(row=number_of_rows, column=i)
                cell.number_format = "#,##0.00 \"кг\""

        for i in range(1, len(init_headers) + 1):
            cell = ws.cell(row=number_of_rows, column=i)
            cell.border = thin_border

        ws.append([])
        ws.append([])
        number_of_rows += 2



        for set_name in self.specification.keys():

            ws.append(public_set_headers)
            number_of_rows += 1

            for col in range(1, len(public_set_headers) + 1):
                cell = ws.cell(row=number_of_rows, column=col)
                cell.font = Font(bold=True, size=headers_size)

            for i in range(1, len(public_set_headers) + 1):
                cell = ws.cell(row=number_of_rows, column=i)
                if public_set_headers[i - 1] != "":
                    cell.border = thick_border
                    cell.fill = orange_fill

            ws.append(["Общие данные " + extract_features(set_name, "Состав ") + ":", "", "", "", "", "", "",
                       self.specification[set_name]["Вес комплекта"],
                       self.specification[set_name]["Себестоимость комплекта"]])
            number_of_rows += 1

            for i in range(1, len(public_set_headers) + 1):
                cell = ws.cell(row=number_of_rows, column=i)
                if "р." in public_set_headers[i - 1]:
                    cell = ws.cell(row=number_of_rows, column=i)
                    cell.number_format = "#,##0.00 ₽"

            for i in range(1, len(public_set_headers) + 1):
                cell = ws.cell(row=number_of_rows, column=i)
                if "кг." in public_set_headers[i - 1]:
                    cell = ws.cell(row=number_of_rows, column=i)
                    cell.number_format = "#,##0.00 \"кг\""

            for i in range(1, len(public_set_headers) + 1):
                cell = ws.cell(row=number_of_rows, column=i)
                if i == 1:
                    cell.border = thick_border
                    cell.fill = orange_fill
                elif public_set_headers[i - 1] == "":
                    cell.border = no_val_border
                else:
                    cell.border = thin_border

            cell = ws.cell(row=number_of_rows, column=1)
            cell.font = Font(bold=True, size=headers_size)

            ws.append([])
            number_of_rows += 1


            ws.append(elem_set_headers)
            number_of_rows += 1

            for col in range(1, len(elem_set_headers) + 1):
                cell = ws.cell(row=number_of_rows, column=col)
                cell.font = Font(bold=True, size=headers_size)

            for i in range(1, len(elem_set_headers) + 1):
                cell = ws.cell(row=number_of_rows, column=i)
                cell.border = thick_border
                cell.fill = orange_fill

            if set_name == "Состав комплекта нащельников":
                for type_name in self.specification[set_name].keys():
                    if extract_features(type_name, "Характеристики ") != "":
                        for batten_name in self.specification[set_name][type_name]:

                            ws.append([batten_name, self.specification[set_name][type_name][batten_name]["артикул"],
                                       self.specification["Состав комплекта нащельников"][batten_name],
                                       self.specification["Состав комплекта нащельников"]["Запас " + batten_name],
                                       self.specification[set_name][type_name][batten_name]["кол-во в"],
                                       self.specification[set_name][type_name][batten_name]["вес за единицу"],
                                       self.specification[set_name][type_name][batten_name]["себестоимость за единицу"],
                                       self.specification[set_name][type_name][batten_name]["вес всех элементов"],
                                       self.specification[set_name][type_name][batten_name]["cебестоимость за все элементы"]])
                            number_of_rows += 1

                            for i in range(1, len(elem_set_headers) + 1):
                                cell = ws.cell(row=number_of_rows, column=i)
                                if "р." in elem_set_headers[i - 1]:
                                    cell = ws.cell(row=number_of_rows, column=i)
                                    cell.number_format = "#,##0.00 ₽"

                            for i in range(1, len(elem_set_headers) + 1):
                                cell = ws.cell(row=number_of_rows, column=i)
                                if "кг." in elem_set_headers[i - 1]:
                                    cell = ws.cell(row=number_of_rows, column=i)
                                    cell.number_format = "#,##0.00 \"кг\""

                            for i in range(1, len(elem_set_headers) + 1):
                                cell = ws.cell(row=number_of_rows, column=i)
                                cell.border = thin_border
            else:
                for type_name in self.specification[set_name].keys():
                    elem_name = extract_features(type_name, "Характеристики ")
                    if elem_name != "":
                        ws.append([elem_name, self.specification[set_name][type_name]["артикул"],
                                   self.specification[set_name][elem_name],
                                   self.specification[set_name]["Запас " + elem_name],
                                   self.specification[set_name][type_name]["кол-во в"],
                                   self.specification[set_name][type_name]["вес за единицу"],
                                   self.specification[set_name][type_name]["себестоимость за единицу"],
                                   self.specification[set_name][type_name]["вес всех элементов"],
                                   self.specification[set_name][type_name]["cебестоимость за все элементы"]])
                        number_of_rows += 1

                        for i in range(1, len(elem_set_headers) + 1):
                            cell = ws.cell(row=number_of_rows, column=i)
                            if "р." in elem_set_headers[i - 1]:
                                cell = ws.cell(row=number_of_rows, column=i)
                                cell.number_format = "#,##0.00 ₽"

                        for i in range(1, len(elem_set_headers) + 1):
                            cell = ws.cell(row=number_of_rows, column=i)
                            if "кг." in elem_set_headers[i - 1]:
                                cell = ws.cell(row=number_of_rows, column=i)
                                cell.number_format = "#,##0.00 \"кг\""

                        for i in range(1, len(elem_set_headers) + 1):
                            cell = ws.cell(row=number_of_rows, column=i)
                            cell.border = thin_border


            ws.append([])
            ws.append([])
            number_of_rows += 2

        for row in range(1, number_of_rows + 1):
            for col in range(1, max_number_of_columns + 1):
                cell = ws.cell(row=row, column=col)
                cell.alignment = Alignment(wrapText=True)

        try:
            wb.save(file_name + ".xlsx")
            print("Файл успешно сохранен.")
        except Exception as e:
            print("Необходимо закрыть файл для его перезаписи!")


    def print_price_and_weight(self):
        print("Вес всех комплектов:", self.financial_characteristics["Форматированный вес всех комплектов"], "кг.")

        print("Полная себестоимость всех комплектов (без НДС):",
              "{:,}".format(math.ceil(self.financial_characteristics["Полная себестоимость всех комплектов"])).replace(",", " "), "р.")

        print("Дилерская цена с максимальной скидкой (с НДС):",
              "{:,}".format(math.ceil(self.financial_characteristics["Дилерская цена с максимальной скидкой (с НДС)"])).replace(",", " "), "р.")

        print("Дилерская цена без скидки  (с НДС):",
              "{:,}".format(math.ceil(self.financial_characteristics["Дилерская цена без скидки (с НДС)"])).replace(",", " "), "р.")

        print("Розничная цена (с НДС):", self.financial_characteristics["Форматированная розничная цена (с НДС)"], "р.")

    def count_price_and_weight(self):
        for set_name in self.specification.keys():
            if set_name == "Состав комплекта нащельников":
                for type_name in self.specification[set_name].keys():
                    if extract_features(type_name, "Характеристики ") != "":
                        for batten_name in self.specification[set_name][type_name]:

                            self.specification[set_name][type_name][batten_name]["cебестоимость за все элементы"] = (
                                    self.specification[set_name][type_name][batten_name]["себестоимость за единицу"] *
                                    (self.specification["Состав комплекта нащельников"][batten_name] +
                                     self.specification["Состав комплекта нащельников"]["Запас " + batten_name]))

                            self.specification["Состав комплекта нащельников"]["Себестоимость комплекта"] += (
                                self.specification)[set_name][type_name][batten_name]["cебестоимость за все элементы"]

                            self.specification[set_name][type_name][batten_name]["вес всех элементов"] = (
                                    self.specification[set_name][type_name][batten_name]["вес за единицу"] *
                                    (self.specification["Состав комплекта нащельников"][batten_name] +
                                     self.specification["Состав комплекта нащельников"]["Запас " + batten_name]))

                            self.specification["Состав комплекта нащельников"]["Вес комплекта"] += (
                                self.specification)[set_name][type_name][batten_name]["вес всех элементов"]

            else:
                for type_name in self.specification[set_name].keys():
                    elem_name = extract_features(type_name, "Характеристики ")
                    if elem_name != "":
                        self.specification[set_name][type_name]["cебестоимость за все элементы"] = (
                                self.specification[set_name][type_name]["себестоимость за единицу"] *
                                (self.specification[set_name][elem_name] +
                                 self.specification[set_name]["Запас " + elem_name]))

                        self.specification[set_name]["Себестоимость комплекта"] += (
                            self.specification)[set_name][type_name]["cебестоимость за все элементы"]

                        self.specification[set_name][type_name]["вес всех элементов"] = (
                                self.specification[set_name][type_name]["вес за единицу"] *
                                (self.specification[set_name][elem_name] +
                                 self.specification[set_name]["Запас " + elem_name]))

                        self.specification[set_name]["Вес комплекта"] += (
                            self.specification)[set_name][type_name]["вес всех элементов"]

            self.financial_characteristics["Вес всех комплектов"] += (
                self.specification)[set_name]["Вес комплекта"]

            self.financial_characteristics["Себестоимость всех комплектов"] += (
                self.specification)[set_name]["Себестоимость комплекта"]

        self.financial_characteristics["Себестоимость всех комплектов"] = (
            self.financial_characteristics["Себестоимость всех комплектов"])

        self.financial_characteristics["Вес всех комплектов"] = (
            self.financial_characteristics["Вес всех комплектов"])

        self.financial_characteristics["Полная себестоимость всех комплектов"] = (
                self.financial_characteristics["Себестоимость всех комплектов"] *
                (1 + self.financial_characteristics["Административно-хозяйственные расходы"] +
                 self.financial_characteristics["Коммерческие расходы"] +
                 self.financial_characteristics["Расходы Управляющей компании"]))

        self.financial_characteristics["Дилерская цена без скидки (с НДС)"] = ((
                self.financial_characteristics["Полная себестоимость всех комплектов"] /
                (1 - self.financial_characteristics["Норма прибыли"])) *
                (1 + self.financial_characteristics["НДС"]))

        self.financial_characteristics["Дилерская цена с максимальной скидкой (с НДС)"] = (
                self.financial_characteristics["Дилерская цена без скидки (с НДС)"] *
                (1 - self.financial_characteristics["Максимальная скидка"]))

        self.financial_characteristics["Розничная цена (с НДС)"] = (
                self.financial_characteristics["Дилерская цена без скидки (с НДС)"] * (
                    1 + self.financial_characteristics["Розничная наценка"]))


        self.financial_characteristics["Форматированный вес всех комплектов"] = (
            "{:,}".format(math.ceil(self.financial_characteristics["Вес всех комплектов"])).replace(",", " "))

        self.financial_characteristics["Форматированная розничная цена (с НДС)"] = (
            "{:,}".format(math.ceil(self.financial_characteristics["Розничная цена (с НДС)"])).replace(",", " "))


    def count_specification(self):
        """
        print()
        print()
        print(self.house_name)
        print("Панели стеновые:")
        """
        for var_walls_list in self.walls_list_list:
            #print("Для стены начинающейся с координатами:", var_walls_list[0])
            for wall in var_walls_list[1]:
                wall.wall_number = var_walls_list[1].index(wall)

            walls_variants_lists = create_cyclic_lists(var_walls_list[1],
                                                       self.specification["Состав комплекта панелей"][
                                                           "Характеристики Панель стеновая"][
                                                           "минимальная длина крепления"] +
                                                       self.specification["Состав комплекта панелей"][
                                                           "Характеристики Панель стеновая"]["толщина"],
                                                       self.specification["Состав комплекта панелей"][
                                                           "Характеристики Панель стеновая"]["ширина"],
                                                       self.specification["Состав комплекта панелей"][
                                                           "Характеристики Панель стеновая"]["шаг сдвига"])

            walls_variants_lists = [self.count_panels(walls_list[0], walls_list[1]) for walls_list in
                                    walls_variants_lists]

            (walls_list, number_of_all_panels, number_of_scopes, number_of_big_gasps,
             number_of_small_panels, inverted_min_panel, biggest_gap) = select_walls_variants_lists(
                walls_variants_lists, min)

            self.walls_list_list = [(var_walls_list[0], walls_list) if var[0] == var_walls_list[0] else var for var in
                                    self.walls_list_list]

            min_panel = 1 - inverted_min_panel

            ideal_panels = 0
            for wall in walls_list:
                ideal_panels += wall.left_panel + wall.right_panel + wall.num_of_full_panels
                # wall.panel_output()
                # print()

            self.specification["Состав комплекта панелей"]["Панель стеновая"] += number_of_all_panels

            """
            print("Параметры для минимизации:")
            print("Панель стеновая посчитанная внутри функции:", number_of_all_panels)
            print("Кол-во выкинутых обрезков панелей:", number_of_scopes)
            print("Кол-во больших чем",
                  self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["зазор на стыке"],
                  "мм областей для запенки:", number_of_big_gasps)
            print("Кол-во маленьких панелей меньше",
                  self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                      "минимальный желательный размер"], "мм:", number_of_small_panels)
            print("Ширина минимальной панели :", round(
                min_panel * self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["ширина"]),
                  "мм.")
            print("Наибольшая область для запенки:", round(biggest_gap), "мм.")

            print("Идеально панель стеновая:", ideal_panels)

        print("Панель стеновая:", self.specification["Состав комплекта панелей"]["Панель стеновая"], '+',
              self.specification["Состав комплекта панелей"]["Запас Панель стеновая"])
        """



        basement_panel_hight = self.basement_hight + \
                               self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                   "минимальное крепление сверху"]

        if (basement_panel_hight) > self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
            "минимальная высота цоколя"] + \
                self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                    "минимальное крепление сверху"]:
            self.specification["Состав комплекта панелей"]["Панель цокольная"] = (
                math.ceil(self.specification["Состав комплекта панелей"]["Панель стеновая"] /
                          int(self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                  "длина"] / (basement_panel_hight))))
            if (self.specification["Состав комплекта панелей"]["Панель цокольная"] *
                    int(self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["длина"] / (
                            basement_panel_hight)) >=
                    self.specification["Состав комплекта панелей"]["Панель стеновая"] +
                    self.specification["Состав комплекта панелей"]["Запас Панель цокольная"]):
                self.specification["Состав комплекта панелей"]["Запас Панель цокольная"] = 0
        else:
            """
            print()
            print("Цоколь слишком низок, должен быть больше:",
                  self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                      "минимальная высота цоколя"] +
                  self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                      "минимальное крепление сверху"], "!!!")
            print()
            """
            self.specification["Состав комплекта панелей"]["Запас Панель цокольная"] = 0
            basement_panel_hight = 0
        """
        print("Панель цокольная:", self.specification["Состав комплекта панелей"]["Панель цокольная"], '+',
              self.specification["Состав комплекта панелей"]["Запас Панель цокольная"])
        """


        for var_walls_list in self.walls_list_list:
            for wall in var_walls_list[1]:
                wall.basement_panel_hight = basement_panel_hight




        number_of_pir_plates, number_of_foams = self.count_pir_plates_and_their_foam()

        for var_walls_list in self.walls_list_list:
            number_of_foams += self.count_panel_foams(var_walls_list[1])

        self.specification["Состав комплекта монтажного"]["Пена монтажная"] = math.ceil(number_of_foams)
        """
        print("Пена монтажная:", self.specification["Состав комплекта монтажного"]["Пена монтажная"], '+',
              self.specification["Состав комплекта монтажного"]["Запас Пена монтажная"])
        """

        self.specification["Состав комплекта кровли"]["Пир-плита"] = math.ceil(number_of_pir_plates)
        """
        print("Пир-плиты:", self.specification["Состав комплекта кровли"]["Пир-плита"], '+',
              self.specification["Состав комплекта кровли"]["Запас Пир-плита"])
        """

        horizontal_batten_types = ["Нащельник парапетный", "Нащельник цокольный", "Нащельник п-образный"]

        if basement_panel_hight > 0:
            horizontal_batten_types.append("Нащельник деформационный шов")
        else:
            self.specification["Состав комплекта нащельников"]["Запас Нащельник деформационный шов"] = 0

        for batten_type in horizontal_batten_types:
            self.count_horizontal_battens_and_add_in_spec(batten_type)

        vertical_batten_types = ["Нащельник угловой", "Нащельник угловой внутренний"]

        self.count_vertical_battens_and_add_in_spec(vertical_batten_types)


        if self.need_down_frames:
            self.specification["Состав комплекта рам"]["Рама универсальная"] = self.frame_number * 2
        else:
            self.specification["Состав комплекта рам"]["Рама универсальная"] = self.frame_number




        self.specification["Состав комплекта металлоконструкций"]["Стойка угловая"] = (
                self.frame_number * self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
            "кол-во угловых стоек"])

        self.specification["Состав комплекта металлоконструкций"]["Стойка средняя"] = self.count_middle_racks()




        self.specification["Состав комплекта металлоконструкций"]["Вкладыш угловой"] = (
                (self.nodes_dic["двойные соединения"] + self.nodes_dic["тройные соединения"] * 2 +
                 self.nodes_dic["четверные соединения"] * 4) *
                self.specification["Состав комплекта металлоконструкций"]["Характеристики Вкладыш угловой"][
                    "кол-во на соединение"])

        if self.need_down_frames:
            self.specification["Состав комплекта металлоконструкций"]["Вкладыш угловой"] *= 2

        self.specification["Состав комплекта металлоконструкций"]["Запас Вкладыш угловой"] = (
            max(round(self.specification["Состав комплекта металлоконструкций"]["Вкладыш угловой"] *
                      self.specification["Состав комплекта металлоконструкций"]["Характеристики Вкладыш угловой"][
                          "запас"]),
                self.specification["Состав комплекта металлоконструкций"]["Запас Вкладыш угловой"]))




        self.specification["Состав комплекта металлоконструкций"]["Пластина соединительная"] = \
            (self.nodes_dic["двойные соединения"] *
             self.specification["Состав комплекта металлоконструкций"]["Характеристики Пластина соединительная"][
                 "кол-во на одну стойку угловую"] +
             self.nodes_dic["тройные соединения"] *
             self.specification["Состав комплекта металлоконструкций"]["Характеристики Пластина соединительная"][
                 "кол-во на одну стойку угловую"] * 2 +
             self.nodes_dic["четверные соединения"] *
             self.specification["Состав комплекта металлоконструкций"]["Характеристики Пластина соединительная"][
                 "кол-во на одну стойку угловую"] * 4)

        if self.need_down_frames:
            self.specification["Состав комплекта металлоконструкций"]["Пластина соединительная"] += \
                (self.nodes_dic["двойные соединения"] *
                 self.specification["Состав комплекта металлоконструкций"]["Характеристики Пластина соединительная"][
                     "кол-во на угловой элемент"] +
                 self.nodes_dic["тройные соединения"] *
                 self.specification["Состав комплекта металлоконструкций"]["Характеристики Пластина соединительная"][
                     "кол-во на угловой элемент"] * 2 +
                 self.nodes_dic["четверные соединения"] *
                 self.specification["Состав комплекта металлоконструкций"]["Характеристики Пластина соединительная"][
                     "кол-во на угловой элемент"] * 4) * 2
        else:
            self.specification["Состав комплекта металлоконструкций"]["Пластина соединительная"] += \
                (self.nodes_dic["двойные соединения"] *
                 self.specification["Состав комплекта металлоконструкций"]["Характеристики Пластина соединительная"][
                     "кол-во на угловой элемент"] +
                 self.nodes_dic["тройные соединения"] *
                 self.specification["Состав комплекта металлоконструкций"]["Характеристики Пластина соединительная"][
                     "кол-во на угловой элемент"] * 2 +
                 self.nodes_dic["четверные соединения"] *
                 self.specification["Состав комплекта металлоконструкций"]["Характеристики Пластина соединительная"][
                     "кол-во на угловой элемент"] * 4)

        self.specification["Состав комплекта металлоконструкций"]["Запас Пластина соединительная"] = (
            max(round(self.specification["Состав комплекта металлоконструкций"]["Пластина соединительная"] *
                      self.specification["Состав комплекта металлоконструкций"][
                          "Характеристики Пластина соединительная"]["запас"]),
                self.specification["Состав комплекта металлоконструкций"]["Запас Пластина соединительная"]))




        self.specification["Состав комплекта монтажного"]["Болт М12"] = (
                self.specification["Состав комплекта металлоконструкций"]["Пластина соединительная"] *
                self.specification["Состав комплекта монтажного"]["Характеристики Болт М12"][
                    "кол-во на пластину соединительную"])

        self.specification["Состав комплекта монтажного"]["Запас Болт М12"] = (
            round(self.specification["Состав комплекта монтажного"]["Болт М12"] *
                  self.specification["Состав комплекта монтажного"]["Характеристики Болт М12"]["запас"]))




        self.specification["Состав комплекта монтажного"]["Винт М12"] = (
                self.specification["Состав комплекта металлоконструкций"]["Стойка угловая"] *
                self.specification["Состав комплекта монтажного"]["Характеристики Винт М12"][
                    "кол-во на стойку угловую"])

        if self.need_down_frames:
            self.specification["Состав комплекта монтажного"]["Винт М12"] *= 2

        self.specification["Состав комплекта монтажного"]["Запас Винт М12"] = (
            round(self.specification["Состав комплекта монтажного"]["Винт М12"] *
                  self.specification["Состав комплекта монтажного"]["Характеристики Винт М12"]["запас"]))




        self.specification["Состав комплекта монтажного"]["Гровер М12"] = (
                self.specification["Состав комплекта монтажного"]["Болт М12"] *
                self.specification["Состав комплекта монтажного"]["Характеристики Гровер М12"]["кол-во на один болт"] +
                self.specification["Состав комплекта монтажного"]["Винт М12"] *
                self.specification["Состав комплекта монтажного"]["Характеристики Гровер М12"]["кол-во на один винт"])

        self.specification["Состав комплекта монтажного"]["Запас Гровер М12"] = (
            round(self.specification["Состав комплекта монтажного"]["Гровер М12"] *
                  self.specification["Состав комплекта монтажного"]["Характеристики Гровер М12"]["запас"]))




        self.specification["Состав комплекта монтажного"]["Гайка М12"] = (
                self.specification["Состав комплекта монтажного"]["Болт М12"] *
                self.specification["Состав комплекта монтажного"]["Характеристики Гайка М12"]["кол-во на один болт"])

        self.specification["Состав комплекта монтажного"]["Запас Гайка М12"] = (
            round(self.specification["Состав комплекта монтажного"]["Гайка М12"] *
                  self.specification["Состав комплекта монтажного"]["Характеристики Гайка М12"]["запас"]))




        num_of_panel_screw = self.count_panel_screw()

        self.specification["Состав комплекта монтажного"]["Саморез 5,5х135"] = num_of_panel_screw

        self.specification["Состав комплекта монтажного"]["Запас Саморез 5,5х135"] = (
            round(self.specification["Состав комплекта монтажного"]["Саморез 5,5х135"] *
                  self.specification["Состав комплекта монтажного"]["Характеристики Саморез 5,5х135"]["запас"]))
        """
        print("Саморез 5,5х135:", self.specification["Состав комплекта монтажного"]["Саморез 5,5х135"], '+',
        self.specification["Состав комплекта монтажного"]["Запас Саморез 5,5х135"])
        """


        self.specification["Состав комплекта монтажного"]["Саморез 4,2х13"] = self.count_all_battens_screw()

        self.specification["Состав комплекта монтажного"]["Запас Саморез 4,2х13"] = (
            round(self.specification["Состав комплекта монтажного"]["Саморез 4,2х13"] *
                  self.specification["Состав комплекта монтажного"]["Характеристики Саморез 4,2х13"]["запас"]))
        """
        print("Саморез 4,2х13", self.specification["Состав комплекта монтажного"]["Саморез 4,2х13"], '+',
        self.specification["Состав комплекта монтажного"]["Запас Саморез 4,2х13"])
        """

        self.specification["Состав комплекта монтажного"]["Герметик"] = math.ceil(self.count_hermetic())
        """
        print("Герметик", self.specification["Состав комплекта монтажного"]["Герметик"], '+',
              self.specification["Состав комплекта монтажного"]["Запас Герметик"])
        """


        self.specification["Состав комплекта монтажного"]["Уголок опорный"] = self.count_down_angels()

        self.specification["Состав комплекта монтажного"]["Запас Уголок опорный"] = (
            round(self.specification["Состав комплекта монтажного"]["Уголок опорный"] *
                  self.specification["Состав комплекта монтажного"]["Характеристики Уголок опорный"]["запас"]))
        """
        print("Уголок опорный", self.specification["Состав комплекта монтажного"]["Уголок опорный"], '+',
              self.specification["Состав комплекта монтажного"]["Запас Уголок опорный"])
        """



        self.specification["Состав комплекта монтажного"]["Лента уплотнительная"] = (
            math.ceil(self.count_sealer() / 1000))

        self.specification["Состав комплекта монтажного"]["Запас Лента уплотнительная"] = (
            round(self.specification["Состав комплекта монтажного"]["Лента уплотнительная"] *
                  self.specification["Состав комплекта монтажного"]["Характеристики Лента уплотнительная"]["запас"]))
        """
        print("Лента уплотнительная", self.specification["Состав комплекта монтажного"]["Лента уплотнительная"], '+',
              self.specification["Состав комплекта монтажного"]["Запас Лента уплотнительная"])
        """



        self.specification["Состав комплекта монтажного"]["Анкер М12"] = self.count_anchors()

        self.specification["Состав комплекта монтажного"]["Запас Анкер М12"] = (
            round(self.specification["Состав комплекта монтажного"]["Анкер М12"] *
                  self.specification["Состав комплекта монтажного"]["Характеристики Анкер М12"]["запас"]))
        """
        print("Анкер М12", self.specification["Состав комплекта монтажного"]["Анкер М12"], '+',
              self.specification["Состав комплекта монтажного"]["Запас Анкер М12"])
        """


        self.specification["Состав комплекта монтажного"]["Уплотнитель зазоров"] = (
            math.ceil(self.count_sealant() / 1000))

        self.specification["Состав комплекта монтажного"]["Запас Уплотнитель зазоров"] = (
            round(self.specification["Состав комплекта монтажного"]["Уплотнитель зазоров"] *
                  self.specification["Состав комплекта монтажного"]["Характеристики Уплотнитель зазоров"]["запас"]))
        """
        print("Уплотнитель зазоров", self.specification["Состав комплекта монтажного"]["Уплотнитель зазоров"], '+',
              self.specification["Состав комплекта монтажного"]["Запас Уплотнитель зазоров"])
        """


        self.specification["Состав комплекта монтажного"]["Мастика"] = (math.ceil(self.count_mastic()))

        self.specification["Состав комплекта монтажного"]["Запас Мастика"] = (
            round(self.specification["Состав комплекта монтажного"]["Мастика"] *
                  self.specification["Состав комплекта монтажного"]["Характеристики Мастика"]["запас"]))
        """
        print("Мастика", self.specification["Состав комплекта монтажного"]["Мастика"], '+',
              self.specification["Состав комплекта монтажного"]["Запас Мастика"])
        """


        self.specification["Состав комплекта монтажного"]["Краска аэрозольная RAL 7016"] = max((
            math.ceil(self.specification["Состав комплекта рам"]["Рама универсальная"] /
                      self.specification["Состав комплекта монтажного"]["Характеристики Краска аэрозольная RAL 7016"][
                          "кол-во рам на один баллон"])),
            self.specification["Состав комплекта монтажного"]["Краска аэрозольная RAL 7016"])

        self.specification["Состав комплекта монтажного"]["Запас Краска аэрозольная RAL 7016"] = (
            round(self.specification["Состав комплекта монтажного"]["Краска аэрозольная RAL 7016"] *
                  self.specification["Состав комплекта монтажного"]["Характеристики Краска аэрозольная RAL 7016"][
                      "запас"]))
        """
        print("Краска аэрозольная RAL 7016",
              self.specification["Состав комплекта монтажного"]["Краска аэрозольная RAL 7016"], '+',
              self.specification["Состав комплекта монтажного"]["Запас Краска аэрозольная RAL 7016"])
        """
        i = 0

    def count_panels(self, walls_list, panel_rest):
        number_of_all_panels = 0
        if panel_rest != 0:
            number_of_all_panels += 1
        number_of_small_panels = 0
        number_of_big_gasps = 0
        number_of_scopes = 0
        if round((1 - panel_rest) * self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
            "ширина"]) < self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
            "минимальная длина крепления"] + \
                self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["толщина"]:
            if panel_rest != 0:
                number_of_scopes += 1
        for wall in walls_list:
            wall.left_panel = panel_rest
            wall_length = 0

            if wall.left_out:
                wall_length += self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                    "толщина"]
            else:
                wall_length += self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                    "зазор между рамами"]

            if wall.consists_from_short:
                wall_length += wall.num_of_frames * \
                               self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                                   "ширина"]
            else:
                wall_length += wall.num_of_frames * \
                               self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["длина"]

            wall_length += (wall.num_of_frames - 1) * \
                           self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                               "зазор между рамами"]

            if not wall.right_out:
                wall_length -= self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                    "толщина"]
                wall_length += self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                    "зазор между рамами"]

            wall_length -= wall.left_panel * \
                           self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["ширина"]

            if round(
                    wall.left_panel * self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                        "ширина"]) < self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                "минимальный желательный размер"] and wall.left_panel != 0:
                number_of_small_panels += 1

            wall_length -= self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                "зазор на стыке"]

            wall.gap = self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                "зазор на стыке"]

            wall.num_of_full_panels = wall_length / \
                                      self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                          "ширина"]

            wall.right_panel = wall.num_of_full_panels - int(wall.num_of_full_panels)

            if wall.num_of_full_panels <= 0:
                wall.right_panel = wall.left_panel
                wall.left_panel = 0

            if round(wall.right_panel *
                     self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["ширина"]) < \
                    self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                        "минимальная длина крепления"]:
                if wall.right_panel != 0:
                    wall.gap += (wall.num_of_full_panels - int(wall.num_of_full_panels)) * \
                                self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                    "ширина"]
                    number_of_big_gasps += 1
                    wall.right_panel = 0
            else:
                number_of_all_panels += 1

            wall.num_of_full_panels = int(wall.num_of_full_panels)
            number_of_all_panels += wall.num_of_full_panels

            if wall.right_panel != 0:
                if round((1 - wall.right_panel) *
                         self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["ширина"]) < \
                        self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                            "минимальная длина крепления"] + \
                        self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                            "толщина"]:
                    if wall.right_panel != 0:
                        number_of_scopes += 1
                    panel_rest = 0
                else:
                    if round(wall.right_panel *
                             self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                 "ширина"]) < \
                            self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                "минимальный желательный размер"]:
                        number_of_small_panels += 1

                    panel_rest = 1 - wall.right_panel
            else:
                panel_rest = 0

        if (walls_list[0].left_panel != 0 and
                walls_list[-1].right_panel != 0 and
                walls_list[0].left_panel + walls_list[-1].right_panel <= 1):
            number_of_all_panels -= 1

        min_panel_left = min(walls_list, key=lambda x: x.left_panel if x.left_panel != 0 else 1).left_panel
        min_panel_right = min(walls_list, key=lambda x: x.right_panel if x.right_panel != 0 else 1).right_panel
        min_panel = min(min_panel_left, min_panel_right)
        inverted_min_panel = 1 - min_panel
        biggest_gap = max(walls_list, key=lambda x: x.gap).gap
        return (walls_list, number_of_all_panels, number_of_scopes,
                number_of_big_gasps, number_of_small_panels, inverted_min_panel, biggest_gap)

    def count_pir_plates_and_their_foam(self):
        num_of_pir_plates = (
                (self.frame_number * self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                    "ширина"] + (self.frame_number - 1) *
                 self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                     "зазор между рамами"] - self.specification["Состав комплекта кровли"]["Характеристики Пир-плита"][
                     "стандартный зазор"]) /
                (self.specification["Состав комплекта кровли"]["Характеристики Пир-плита"]["ширина"] +
                 self.specification["Состав комплекта кровли"]["Характеристики Пир-плита"]["стандартный зазор"]))
        pir_plate_tail = num_of_pir_plates - int(num_of_pir_plates)
        pir_plate_tail = pir_plate_tail * (
                self.specification["Состав комплекта кровли"]["Характеристики Пир-плита"]["ширина"] +
                self.specification["Состав комплекта кровли"]["Характеристики Пир-плита"]["стандартный зазор"])
        pir_plate_tail = pir_plate_tail - self.specification["Состав комплекта кровли"]["Характеристики Пир-плита"][
            "стандартный зазор"]
        pir_plate_tail = pir_plate_tail / self.specification["Состав комплекта кровли"]["Характеристики Пир-плита"][
            "ширина"]
        num_of_pir_plates = int(num_of_pir_plates) + pir_plate_tail

        num_of_foams = num_of_pir_plates * self.specification["Состав комплекта кровли"]["Характеристики Пир-плита"][
            "ширина"] * self.specification["Состав комплекта кровли"]["Характеристики Пир-плита"][
                           "стандартный зазор"] * 3
        num_of_foams += (
                (round(num_of_pir_plates) + 1) *
                (self.specification["Состав комплекта кровли"]["Характеристики Пир-плита"]["длина"] * 2 +
                 self.specification["Состав комплекта кровли"]["Характеристики Пир-плита"]["стандартный зазор"] * 3) *
                self.specification["Состав комплекта кровли"]["Характеристики Пир-плита"]["стандартный зазор"])

        num_of_pir_plates *= self.specification["Состав комплекта кровли"]["Характеристики Пир-плита"][
            "кол-во пир-плит на длину рамы"]

        if self.connections_dic["короткие соединения"] != 0:
            num_of_foams += (
                    (self.connections_dic["короткие соединения"] *
                     self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["ширина"] + (
                             self.connections_dic["длинные соединения"] - 1) *
                     self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                         "зазор между рамами"]) *
                    (self.specification["Состав комплекта кровли"]["Характеристики Пир-плита"][
                         "зазор при соединении через короткую сторону"] -
                     self.specification["Состав комплекта кровли"]["Характеристики Пир-плита"][
                         "стандартный зазор"] * 2))

        num_of_foams = (num_of_foams * self.specification["Состав комплекта кровли"]["Характеристики Пир-плита"][
            "толщина"]) / self.specification["Состав комплекта монтажного"]["Характеристики Пена монтажная"]["объем"]

        return num_of_pir_plates, num_of_foams

    def count_panel_foams(self, walls_list):
        res_foam = 0
        for wall in walls_list:
            if wall.basement_panel_hight != 0:
                wall.num_of_foam += (((wall.left_panel + wall.num_of_full_panels + wall.right_panel) *
                                      self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                          "ширина"] *
                                      self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                          "толщина"] *
                                      self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                          "зазор на стыке"]) /
                                     self.specification["Состав комплекта монтажного"]["Характеристики Пена монтажная"][
                                         "объем"])
            wall.num_of_foam += ((wall.gap * (
                        self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["длина"] +
                        self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                            "зазор на стыке"] +
                        wall.basement_panel_hight) *
                                  self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                      "толщина"]) /
                                 self.specification["Состав комплекта монтажного"]["Характеристики Пена монтажная"][
                                     "объем"])
            res_foam += wall.num_of_foam
        return res_foam

    def count_horizontal_battens_and_add_in_spec(self, batten_type):
        for var_walls_list in self.walls_list_list:
            #print("Для стены начинающейся с координатами:", var_walls_list[0])


            (walls_list, number_of_battens, number_of_jumps, number_of_scopes,
             number_of_small_battens, inverted_min_batten,
             full_size_of_battens) = self.count_horizontal_battens(var_walls_list[1], batten_type)

            self.walls_list_list = [(var_walls_list[0], walls_list) if var[0] == var_walls_list[0] else var for var in
                                    self.walls_list_list]

            number_of_battens *= \
            self.specification["Состав комплекта нащельников"]["Характеристики горизонтальных нащельников"][
                batten_type]["кол-во слоев в доме"]
            min_batten = 1 - inverted_min_batten
            #print()
            #print(batten_type, ":")

            """
            for wall in var_walls_list[1]:
                wall.horizontal_battens_output(batten_type)
                print()
            """
            """
            print("Кол-во слоев этого нащельника в доме:",
                  house.specification["Состав комплекта нащельников"]["Характеристики горизонтальных нащельников"][
                      batten_type]["кол-во слоев в доме"])
            print("Параметры для минимизации:")
            print("Кол-во нащельников", number_of_battens)
            print("Кол-во прыжков при монтаже нащельников", number_of_jumps)
            print("Кол-во выкинутых обрезков нащельников:", number_of_scopes)
            print("Кол-во маленьких меньше чем",
                  house.specification["Состав комплекта нащельников"]["Характеристики горизонтальных нащельников"][
                      batten_type]["минимальный желательный размер"],
                  "нащельников:", number_of_small_battens)
            print("Длина минимального нащельника :", round(min_batten *
                                                           house.specification["Состав комплекта нащельников"][
                                                               "Характеристики горизонтальных нащельников"][
                                                               batten_type]["длина"]))
            print("Реальное кол-во нащельников:", number_of_battens)
            print("Идеальное кол-во нащельников:",
                  house.specification["Состав комплекта нащельников"]["Характеристики горизонтальных нащельников"][
                      batten_type]["кол-во слоев в доме"] *
                  (full_size_of_battens +
                   int(full_size_of_battens /
                       house.specification["Состав комплекта нащельников"]["Характеристики горизонтальных нащельников"][
                           batten_type]["длина"]) *
                   house.specification["Состав комплекта нащельников"]["Характеристики горизонтальных нащельников"][
                       batten_type]["нахлест"]) /
                  house.specification["Состав комплекта нащельников"]["Характеристики горизонтальных нащельников"][
                      batten_type]["длина"])
            """
            self.specification["Состав комплекта нащельников"][batten_type] += number_of_battens

            #print()

        #print()
        self.specification["Состав комплекта нащельников"]["Запас " + batten_type] = (
                max(round(self.specification["Состав комплекта нащельников"][batten_type] *
                          self.specification["Состав комплекта нащельников"]["Характеристики горизонтальных нащельников"][
                              batten_type]["запас"]),
                    self.specification["Состав комплекта нащельников"]["Запас " + batten_type]))
        """
        print(batten_type, ":",
              self.specification["Состав комплекта нащельников"][batten_type], '+',
              self.specification["Состав комплекта нащельников"]["Запас " + batten_type])

        print()
        """

    def count_horizontal_battens(self, walls_list, batten_type):
        up_battens_list = []
        for wall in walls_list:
            # wall.batten[batten_type] = {}
            wall_length = wall.count_wall_length_funcs[batten_type]

            up_battens_list.append((wall_length / self.specification["Состав комплекта нащельников"][
                "Характеристики горизонтальных нащельников"][batten_type]["длина"], walls_list.index(wall)))

        up_battens_variants_lists = create_cyclic_lists(up_battens_list,
                                                        self.specification["Состав комплекта нащельников"][
                                                            "Характеристики горизонтальных нащельников"][batten_type][
                                                            "минимальная длина на углу"],
                                                        self.specification["Состав комплекта нащельников"][
                                                            "Характеристики горизонтальных нащельников"][batten_type][
                                                            "длина"],
                                                        self.specification["Состав комплекта нащельников"][
                                                            "Характеристики горизонтальных нащельников"][batten_type][
                                                            "шаг сдвига"])

        connect_variants_list = []
        for up_battens_variant_list in up_battens_variants_lists:
            (conected_battens_list,
             number_of_battens,
             number_of_jumps,
             number_of_scopes,
             number_of_small_battens,
             inverted_min_batten,
             full_size_of_battens) = (
                connect_list(up_battens_variant_list[0],
                             self.specification["Состав комплекта нащельников"][
                                 "Характеристики горизонтальных нащельников"][batten_type][
                                 "минимальная длина на углу"] /
                             self.specification["Состав комплекта нащельников"][
                                 "Характеристики горизонтальных нащельников"][batten_type]["длина"],
                             self.specification["Состав комплекта нащельников"][
                                 "Характеристики горизонтальных нащельников"][batten_type]["нахлест"] /
                             self.specification["Состав комплекта нащельников"][
                                 "Характеристики горизонтальных нащельников"][batten_type]["длина"],
                             up_battens_variant_list[1],
                             self.specification["Состав комплекта нащельников"][
                                 "Характеристики горизонтальных нащельников"][batten_type][
                                 "минимальный желательный размер"] /
                             self.specification["Состав комплекта нащельников"][
                                 "Характеристики горизонтальных нащельников"][batten_type]["длина"]))

            connect_variants_list.append((conected_battens_list, number_of_battens, number_of_jumps, number_of_scopes,
                                          number_of_small_battens, inverted_min_batten))

        (best_connect_list, number_of_battens, number_of_jumps,
         number_of_scopes, number_of_small_battens, inverted_min_batten) = (
            select_walls_variants_lists(connect_variants_list, min))

        full_size_of_battens = round(full_size_of_battens * self.specification["Состав комплекта нащельников"][
            "Характеристики горизонтальных нащельников"][batten_type]["длина"])
        for wall in walls_list:
            wall.batten[batten_type]["Левая парная стена по нащельнику этого типа"] = (
                best_connect_list[wall.wall_number].left_connected_number)
            wall.batten[batten_type]["Длина левого нащельника этого типа"] = (
                best_connect_list[wall.wall_number].left_elem_size)
            wall.batten[batten_type]["Кол-во целых нащельников этого типа"] = (
                best_connect_list[wall.wall_number].full_elem_num)
            wall.batten[batten_type]["Длина правого нащельника этого типа"] = (
                best_connect_list[wall.wall_number].right_elem_size)
            wall.batten[batten_type]["Правая парная стена по нащельнику этого типа"] = (
                best_connect_list[wall.wall_number].right_connected_number)

        return (walls_list, number_of_battens, number_of_jumps,
                number_of_scopes, number_of_small_battens, inverted_min_batten,
                full_size_of_battens)

    def count_vertical_battens_and_add_in_spec(self, vertical_batten_types):
        number_of_batens = {}
        for batten_type in vertical_batten_types:
            number_of_batens[batten_type] = 0

        for var_walls_list in self.walls_list_list:
            #print("Для стены начинающейся с координатами:", var_walls_list[0])
            for wall in var_walls_list[1]:
                for batten_type in vertical_batten_types:
                    wall_hight = self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                     "длина"] + \
                                 self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                     "зазор на стыке"] + wall.basement_panel_hight
                    if wall.left_vertical_batten_type == batten_type:
                        # wall.batten[batten_type] = {}
                        if wall_hight < self.specification["Состав комплекта нащельников"][
                            "Характеристики вертикальных нащельников"][batten_type]["длина"]:
                            wall.batten[batten_type]["Кол-во целых нащельников этого типа"] = 0
                            wall.batten[batten_type]["Длина верхнего нащельника этого типа"] = wall_hight
                        else:
                            wall.batten[batten_type]["Кол-во целых нащельников этого типа"] = 1
                            wall_hight = wall_hight - self.specification["Состав комплекта нащельников"][
                                "Характеристики вертикальных нащельников"][batten_type]["длина"]
                            number_of_battens = (
                                    wall_hight / (self.specification["Состав комплекта нащельников"][
                                                      "Характеристики вертикальных нащельников"][batten_type]["длина"] -
                                                  self.specification["Состав комплекта нащельников"][
                                                      "Характеристики вертикальных нащельников"][batten_type][
                                                      "нахлест"]))
                            if number_of_battens >= 1:
                                number_of_batens[batten_type] += int(number_of_battens)
                                wall.batten[batten_type]["Кол-во целых нащельников этого типа"] += (
                                    int(number_of_battens))
                                number_of_battens = number_of_battens - int(number_of_battens)

                            wall.batten[batten_type]["Длина верхнего нащельника этого типа"] = \
                                (((number_of_battens) * (self.specification["Состав комплекта нащельников"][
                                                             "Характеристики вертикальных нащельников"][batten_type][
                                                             "длина"] -
                                                         self.specification["Состав комплекта нащельников"][
                                                             "Характеристики вертикальных нащельников"][batten_type][
                                                             "нахлест"]) +
                                  self.specification["Состав комплекта нащельников"][
                                      "Характеристики вертикальных нащельников"][batten_type]["нахлест"]) /
                                 self.specification["Состав комплекта нащельников"][
                                     "Характеристики вертикальных нащельников"][batten_type]["длина"])

                            number_of_batens[batten_type] += (
                                    wall.batten[batten_type]["Кол-во целых нащельников этого типа"] +
                                    nearest_share(wall.batten[batten_type]["Длина верхнего нащельника этого типа"],
                                                  self.specification["Состав комплекта нащельников"][
                                                      "Характеристики вертикальных нащельников"][batten_type][
                                                      "минимальная длина крепления"] /
                                                  self.specification["Состав комплекта нащельников"][
                                                      "Характеристики вертикальных нащельников"][batten_type]["длина"]))
                # wall.vertical_battens_output()

        for batten_type in vertical_batten_types:
            number_of_batens[batten_type] = math.ceil(number_of_batens[batten_type])

        for batten_type in vertical_batten_types:
            number_of_battens = number_of_batens[batten_type]
            #print()
            self.specification["Состав комплекта нащельников"][batten_type] = number_of_battens
            if number_of_battens != 0:
                self.specification["Состав комплекта нащельников"]["Запас " + batten_type] = (
                    max(round(number_of_battens *
                              self.specification["Состав комплекта нащельников"][
                                  "Характеристики вертикальных нащельников"][batten_type]["запас"]),
                        self.specification["Состав комплекта нащельников"]["Запас " + batten_type]))
            else:
                self.specification["Состав комплекта нащельников"]["Запас " + batten_type] = 0
            """
            print(batten_type, ":",
                  self.specification["Состав комплекта нащельников"][batten_type], '+',
                  self.specification["Состав комплекта нащельников"]["Запас " + batten_type])
            """

    def count_middle_racks(self):
        num_of_middle_racks = 0
        for var_walls_list in self.walls_list_list:
            for wall in var_walls_list[1]:
                if not wall.consists_from_short:
                    wall.num_of_middle_racks += wall.num_of_frames
                    num_of_middle_racks += wall.num_of_frames

        return num_of_middle_racks

    def count_panel_screw(self):
        number_of_screw = 0
        for var_walls_list in self.walls_list_list:
            for wall in var_walls_list[1]:
                wall.left_panel_screw = self.count_corner_screw(wall.left_panel, wall.basement_panel_hight)
                wall.right_panel_screw = self.count_corner_screw(wall.right_panel, wall.basement_panel_hight)
                wall.num_of_full_panels_screw = (
                        wall.num_of_full_panels *
                        self.specification["Состав комплекта монтажного"]["Характеристики Саморез 5,5х135"][
                            "кол-во саморезов на верх панели"])
                if self.need_down_frames:
                    wall.num_of_full_panels_screw += (
                            wall.num_of_full_panels *
                            self.specification["Состав комплекта монтажного"]["Характеристики Саморез 5,5х135"][
                                "кол-во саморезов на низ панели на раму"])
                else:
                    wall.num_of_full_panels_screw += (
                            wall.num_of_full_panels *
                            self.specification["Состав комплекта монтажного"]["Характеристики Саморез 5,5х135"][
                                "кол-во саморезов на низ панели на уголок"])

                if self.need_down_frames and wall.basement_panel_hight:
                    wall.num_of_full_panels_screw *= 2

                number_of_screw += wall.left_panel_screw + wall.right_panel_screw + wall.num_of_full_panels_screw

        return number_of_screw

    def count_corner_screw(self, init_corner_panel, basement_hight):
        corner_panel_screw = 0
        screw_step_for_up_frames = (
                self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["ширина"] / (
                self.specification["Состав комплекта монтажного"]["Характеристики Саморез 5,5х135"][
                    "кол-во саморезов на верх панели"] - 1))
        screw_step_for_up_frames /= self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
            "ширина"]

        screw_step_for_down_with_down_frames = (
                self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["ширина"] / (
                self.specification["Состав комплекта монтажного"]["Характеристики Саморез 5,5х135"][
                    "кол-во саморезов на низ панели на раму"] - 1))
        screw_step_for_down_with_down_frames /= \
            self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["ширина"]

        screw_step_for_down_without_down_frames = (
                self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["ширина"] / (
                self.specification["Состав комплекта монтажного"]["Характеристики Саморез 5,5х135"][
                    "кол-во саморезов на низ панели на уголок"] - 1))
        screw_step_for_down_without_down_frames /= \
            self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"]["ширина"]

        if init_corner_panel != 0:
            corner_panel_screw += 4
            corner_panel = init_corner_panel - screw_step_for_up_frames
            while corner_panel > 0:
                corner_panel -= screw_step_for_up_frames
                corner_panel_screw += 1

            corner_panel = init_corner_panel

            if self.need_down_frames:
                corner_panel -= screw_step_for_down_with_down_frames
                while corner_panel > 0:
                    corner_panel -= screw_step_for_down_with_down_frames
                    corner_panel_screw += 1
            else:
                corner_panel -= screw_step_for_down_without_down_frames
                while corner_panel > 0:
                    corner_panel -= screw_step_for_down_without_down_frames
                    corner_panel_screw += 1

            if self.need_down_frames and basement_hight != 0:
                corner_panel_screw *= 2

        return corner_panel_screw

    def count_all_battens_screw(self):
        num_of_battens_screw = 0
        for var_walls_list in self.walls_list_list:
            for wall in var_walls_list[1]:
                for batten_type in self.specification["Состав комплекта нащельников"][
                    "Характеристики горизонтальных нащельников"].keys():
                    wall.batten[batten_type]["Кол-во саморезов для левого нащельника этого типа"] = (
                            count_battens_screw(wall.batten[batten_type]["Длина левого нащельника этого типа"],
                                                self.specification["Состав комплекта нащельников"][
                                                    "Характеристики горизонтальных нащельников"][batten_type][
                                                    "шаг крепления"] /
                                                self.specification["Состав комплекта нащельников"][
                                                    "Характеристики горизонтальных нащельников"][batten_type]["длина"]) *
                            self.specification["Состав комплекта нащельников"]["Характеристики горизонтальных нащельников"][
                                batten_type]["кол-во саморезов"])

                    wall.batten[batten_type]["Кол-во саморезов для целых нащельников этого типа"] = (
                            count_battens_screw(wall.batten[batten_type]["Кол-во целых нащельников этого типа"],
                                                self.specification["Состав комплекта нащельников"][
                                                    "Характеристики горизонтальных нащельников"][batten_type][
                                                    "шаг крепления"] /
                                                self.specification["Состав комплекта нащельников"][
                                                    "Характеристики горизонтальных нащельников"][batten_type]["длина"]) *
                            self.specification["Состав комплекта нащельников"]["Характеристики горизонтальных нащельников"][
                                batten_type]["кол-во саморезов"])

                    wall.batten[batten_type]["Кол-во саморезов для правого нащельника этого типа"] = (
                            count_battens_screw(wall.batten[batten_type]["Длина правого нащельника этого типа"],
                                                self.specification["Состав комплекта нащельников"][
                                                    "Характеристики горизонтальных нащельников"][batten_type][
                                                    "шаг крепления"] /
                                                self.specification["Состав комплекта нащельников"][
                                                    "Характеристики горизонтальных нащельников"][batten_type]["длина"]) *
                            self.specification["Состав комплекта нащельников"]["Характеристики горизонтальных нащельников"][
                                batten_type]["кол-во саморезов"])

                    num_of_battens_screw += ((
                                                     wall.batten[batten_type][
                                                         "Кол-во саморезов для левого нащельника этого типа"] +
                                                     wall.batten[batten_type][
                                                         "Кол-во саморезов для целых нащельников этого типа"] +
                                                     wall.batten[batten_type][
                                                         "Кол-во саморезов для правого нащельника этого типа"]) *
                                             self.specification["Состав комплекта нащельников"][
                                                 "Характеристики горизонтальных нащельников"][batten_type][
                                                 "кол-во слоев в доме"])

                for batten_type in self.specification["Состав комплекта нащельников"][
                    "Характеристики вертикальных нащельников"].keys():
                    wall.batten[batten_type]["Кол-во саморезов для целых нащельников этого типа"] = (
                            count_battens_screw(wall.batten[batten_type]["Кол-во целых нащельников этого типа"],
                                                self.specification["Состав комплекта нащельников"][
                                                    "Характеристики вертикальных нащельников"][batten_type][
                                                    "шаг крепления"] /
                                                self.specification["Состав комплекта нащельников"][
                                                    "Характеристики вертикальных нащельников"][batten_type]["длина"]) *
                            self.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"][
                                batten_type]["кол-во саморезов"])

                    wall.batten[batten_type]["Кол-во саморезов для верхнего нащельника этого типа"] = (
                            count_battens_screw(wall.batten[batten_type]["Длина верхнего нащельника этого типа"],
                                                self.specification["Состав комплекта нащельников"][
                                                    "Характеристики вертикальных нащельников"][batten_type][
                                                    "шаг крепления"] /
                                                self.specification["Состав комплекта нащельников"][
                                                    "Характеристики вертикальных нащельников"][batten_type]["длина"]) *
                            self.specification["Состав комплекта нащельников"]["Характеристики вертикальных нащельников"][
                                batten_type]["кол-во саморезов"])

                    num_of_battens_screw += (
                            wall.batten[batten_type]["Кол-во саморезов для целых нащельников этого типа"] +
                            wall.batten[batten_type]["Кол-во саморезов для верхнего нащельника этого типа"])

        return num_of_battens_screw

    def count_hermetic(self):
        num_of_hermetics = 0
        for var_walls_list in self.walls_list_list:
            for wall in var_walls_list[1]:
                if wall.left_panel != 0 and wall.num_of_full_panels != 0:
                    wall.left_panel_hermetic += (
                            self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                "кол-во пазов"] * (
                                        self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                            "длина"] + wall.basement_panel_hight) /
                            self.specification["Состав комплекта монтажного"]["Характеристики Герметик"]["длина шва"])

                if wall.num_of_full_panels != 0:
                    wall.num_of_full_panels_hermetic = (
                            self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                "кол-во пазов"] * (wall.num_of_full_panels - 1) *
                            ((self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                  "длина"] + wall.basement_panel_hight) /
                             self.specification["Состав комплекта монтажного"]["Характеристики Герметик"]["длина шва"]))

                if wall.right_panel != 0:
                    wall.right_panel_hermetic = (
                                self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                    "кол-во пазов"] *
                                (self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                     "длина"] + wall.basement_panel_hight) /
                                self.specification["Состав комплекта монтажного"]["Характеристики Герметик"]["длина шва"])

                num_of_hermetics += wall.left_panel_hermetic + wall.num_of_full_panels_hermetic + wall.right_panel_hermetic

                for batten_type in self.specification["Состав комплекта нащельников"][
                    "Характеристики горизонтальных нащельников"].keys():
                    wall.batten[batten_type]["Кол-во герметиков для левого нащельника этого типа"] = (
                                                                                                             self.specification[
                                                                                                                 "Состав комплекта нащельников"][
                                                                                                                 "Характеристики горизонтальных нащельников"][
                                                                                                                 batten_type][
                                                                                                                 "кол-во прилеганий для герметика"] *
                                                                                                             wall.batten[
                                                                                                                 batten_type][
                                                                                                                 "Длина левого нащельника этого типа"] *
                                                                                                             self.specification[
                                                                                                                 "Состав комплекта нащельников"][
                                                                                                                 "Характеристики горизонтальных нащельников"][
                                                                                                                 batten_type][
                                                                                                                 "длина"]) / \
                                                                                                     self.specification[
                                                                                                         "Состав комплекта монтажного"][
                                                                                                         "Характеристики Герметик"][
                                                                                                         "длина шва"]

                    wall.batten[batten_type]["Кол-во герметиков для целых нащельников этого типа"] = (
                                                                                                             self.specification[
                                                                                                                 "Состав комплекта нащельников"][
                                                                                                                 "Характеристики горизонтальных нащельников"][
                                                                                                                 batten_type][
                                                                                                                 "кол-во прилеганий для герметика"] *
                                                                                                             wall.batten[
                                                                                                                 batten_type][
                                                                                                                 "Кол-во целых нащельников этого типа"] *
                                                                                                             self.specification[
                                                                                                                 "Состав комплекта нащельников"][
                                                                                                                 "Характеристики горизонтальных нащельников"][
                                                                                                                 batten_type][
                                                                                                                 "длина"]) / \
                                                                                                     self.specification[
                                                                                                         "Состав комплекта монтажного"][
                                                                                                         "Характеристики Герметик"][
                                                                                                         "длина шва"]

                    wall.batten[batten_type]["Кол-во герметиков для правого нащельника этого типа"] = (
                                                                                                              self.specification[
                                                                                                                  "Состав комплекта нащельников"][
                                                                                                                  "Характеристики горизонтальных нащельников"][
                                                                                                                  batten_type][
                                                                                                                  "кол-во прилеганий для герметика"] *
                                                                                                              wall.batten[
                                                                                                                  batten_type][
                                                                                                                  "Длина правого нащельника этого типа"] *
                                                                                                              self.specification[
                                                                                                                  "Состав комплекта нащельников"][
                                                                                                                  "Характеристики горизонтальных нащельников"][
                                                                                                                  batten_type][
                                                                                                                  "длина"]) / \
                                                                                                      self.specification[
                                                                                                          "Состав комплекта монтажного"][
                                                                                                          "Характеристики Герметик"][
                                                                                                          "длина шва"]

                    num_of_hermetics += ((
                                                 wall.batten[batten_type][
                                                     "Кол-во герметиков для левого нащельника этого типа"] +
                                                 wall.batten[batten_type][
                                                     "Кол-во герметиков для целых нащельников этого типа"] +
                                                 wall.batten[batten_type][
                                                     "Кол-во герметиков для правого нащельника этого типа"]) *
                                         self.specification["Состав комплекта нащельников"][
                                             "Характеристики горизонтальных нащельников"][batten_type][
                                             "кол-во слоев в доме"])

                for batten_type in self.specification["Состав комплекта нащельников"][
                    "Характеристики вертикальных нащельников"].keys():
                    wall.batten[batten_type]["Кол-во герметиков для целых нащельников этого типа"] = (
                                                                                                             self.specification[
                                                                                                                 "Состав комплекта нащельников"][
                                                                                                                 "Характеристики вертикальных нащельников"][
                                                                                                                 batten_type][
                                                                                                                 "кол-во прилеганий для герметика"] *
                                                                                                             wall.batten[
                                                                                                                 batten_type][
                                                                                                                 "Кол-во целых нащельников этого типа"] *
                                                                                                             self.specification[
                                                                                                                 "Состав комплекта нащельников"][
                                                                                                                 "Характеристики вертикальных нащельников"][
                                                                                                                 batten_type][
                                                                                                                 "длина"]) / \
                                                                                                     self.specification[
                                                                                                         "Состав комплекта монтажного"][
                                                                                                         "Характеристики Герметик"][
                                                                                                         "длина шва"]

                    wall.batten[batten_type]["Кол-во герметиков для верхнего нащельника этого типа"] = (
                                                                                                               self.specification[
                                                                                                                   "Состав комплекта нащельников"][
                                                                                                                   "Характеристики вертикальных нащельников"][
                                                                                                                   batten_type][
                                                                                                                   "кол-во прилеганий для герметика"] *
                                                                                                               wall.batten[
                                                                                                                   batten_type][
                                                                                                                   "Длина верхнего нащельника этого типа"] *
                                                                                                               self.specification[
                                                                                                                   "Состав комплекта нащельников"][
                                                                                                                   "Характеристики вертикальных нащельников"][
                                                                                                                   batten_type][
                                                                                                                   "длина"]) / \
                                                                                                       self.specification[
                                                                                                           "Состав комплекта монтажного"][
                                                                                                           "Характеристики Герметик"][
                                                                                                           "длина шва"]

                    num_of_hermetics += (
                            wall.batten[batten_type]["Кол-во герметиков для целых нащельников этого типа"] +
                            wall.batten[batten_type]["Кол-во герметиков для верхнего нащельника этого типа"])

        return num_of_hermetics

    def count_down_angels(self):
        num_of_down_angels = 0
        if not self.need_down_frames:
            for var_walls_list in self.walls_list_list:
                for wall in var_walls_list[1]:
                    if wall.left_out:
                        if (wall.left_panel *
                                self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                    "ширина"] -
                                self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                    "толщина"] >
                                self.specification["Состав комплекта металлоконструкций"][
                                    "Характеристики Стойка угловая"]["ширина"] and
                                (wall.right_panel != 0 or wall.num_of_full_panels != 0)):
                            wall.left_panel_down_angel = 1
                    else:
                        if (wall.left_panel *
                                self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                    "ширина"] -
                                self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                                    "зазор между рамами"] >
                                self.specification["Состав комплекта металлоконструкций"][
                                    "Характеристики Стойка угловая"]["ширина"] and
                                (wall.right_panel != 0 or wall.num_of_full_panels != 0)):
                            wall.left_panel_down_angel = 1

                    wall.num_of_full_panels_down_angels = (wall.num_of_full_panels - 1)
                    if not (wall.num_of_full_panels == 0 and wall.left_panel_down_angel == 1):
                        if wall.right_out:
                            if (wall.right_panel *
                                    self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                        "ширина"] -
                                    self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                        "зазор на стыке"] >
                                    self.specification["Состав комплекта металлоконструкций"][
                                        "Характеристики Стойка угловая"]["ширина"] and
                                    (wall.left_panel != 0 or wall.num_of_full_panels != 0)):
                                wall.right_panel_down_angel = 1
                        else:
                            if (wall.right_panel *
                                    self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                        "ширина"] +
                                    self.specification["Состав комплекта панелей"]["Характеристики Панель стеновая"][
                                        "толщина"] -
                                    self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                                        "зазор между рамами"] >
                                    self.specification["Состав комплекта металлоконструкций"][
                                        "Характеристики Стойка угловая"]["ширина"] and
                                    (wall.left_panel != 0 or wall.num_of_full_panels != 0)):
                                wall.right_panel_down_angel = 1

                    num_of_down_angels += (wall.left_panel_down_angel +
                                           wall.num_of_full_panels_down_angels +
                                           wall.right_panel_down_angel)

        return num_of_down_angels

    def count_sealer(self):
        sealer_length = 0
        for var_walls_list in self.walls_list_list:
            for wall in var_walls_list[1]:
                wall.sealer += (wall.num_of_frames *
                                self.specification["Состав комплекта металлоконструкций"][
                                    "Характеристики Стойка угловая"][
                                    "длина"] *
                                self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                                    "кол-во угловых стоек на одной стороне"])
                if not wall.consists_from_short:
                    wall.sealer += (wall.num_of_middle_racks *
                                    self.specification["Состав комплекта металлоконструкций"][
                                        "Характеристики Стойка средняя"][
                                        "длина"])

                    wall.sealer += (wall.num_of_frames *
                                    self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                                        "длина"] +
                                    (wall.num_of_frames - 1) *
                                    self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                                        "зазор между рамами"])

                else:

                    wall.sealer += (wall.num_of_frames *
                                    self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                                        "ширина"] +
                                    (wall.num_of_frames - 1) *
                                    self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                                        "зазор между рамами"])

                if self.need_down_frames:
                    if not wall.consists_from_short:

                        wall.sealer += (wall.num_of_frames *
                                        self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                                            "длина"] +
                                        (wall.num_of_frames - 1) *
                                        self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                                            "зазор между рамами"])

                        if wall.basement_panel_hight != 0:
                            wall.sealer += (wall.num_of_frames *
                                            self.specification["Состав комплекта рам"][
                                                "Характеристики Рама универсальная"][
                                                "длина"] +
                                            (wall.num_of_frames - 1) *
                                            self.specification["Состав комплекта рам"][
                                                "Характеристики Рама универсальная"][
                                                "зазор между рамами"])

                    else:

                        wall.sealer += (wall.num_of_frames *
                                        self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                                            "ширина"] +
                                        (wall.num_of_frames - 1) *
                                        self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                                            "зазор между рамами"])

                        if wall.basement_panel_hight != 0:
                            wall.sealer += (wall.num_of_frames *
                                            self.specification["Состав комплекта рам"][
                                                "Характеристики Рама универсальная"][
                                                "ширина"] +
                                            (wall.num_of_frames - 1) *
                                            self.specification["Состав комплекта рам"][
                                                "Характеристики Рама универсальная"][
                                                "зазор между рамами"])

                else:

                    wall.sealer += (
                            (wall.left_panel_down_angel +
                             wall.num_of_full_panels_down_angels +
                             wall.right_panel_down_angel) *
                            self.specification["Состав комплекта монтажного"]["Характеристики Уголок опорный"]["длина"])

                sealer_length += wall.sealer

            sealer_length += (
                    self.specification["Состав комплекта металлоконструкций"]["Характеристики Стойка дверная правая"][
                        "длина"] +
                    self.specification["Состав комплекта металлоконструкций"]["Характеристики Стойка дверная левая"][
                        "длина"])

        return sealer_length

    def count_anchors(self):
        num_of_anchors = 0
        if not self.need_down_frames:
            for var_walls_list in self.walls_list_list:
                for wall in var_walls_list[1]:
                    wall.num_of_middle_racks_anchors = (
                            wall.num_of_middle_racks *
                            self.specification["Состав комплекта металлоконструкций"]["Характеристики Стойка средняя"][
                                "кол-во анкеров для крепления"])
                    wall.num_of_panel_down_angles_anchors = (
                            (
                                    wall.left_panel_down_angel + wall.num_of_full_panels_down_angels + wall.right_panel_down_angel) *
                            self.specification["Состав комплекта монтажного"]["Характеристики Уголок опорный"][
                                "кол-во анкеров для крепления"])

                    num_of_anchors += wall.num_of_middle_racks_anchors + wall.num_of_panel_down_angles_anchors

            num_of_anchors += (
                    self.specification["Состав комплекта металлоконструкций"]["Характеристики Стойка дверная правая"][
                        "кол-во анкеров для крепления"] +
                    self.specification["Состав комплекта металлоконструкций"]["Характеристики Стойка дверная левая"][
                        "кол-во анкеров для крепления"])

        return num_of_anchors

    def count_sealant(self):
        sealant_length = 0
        sealant_length += (self.connections_dic["длинные соединения"] *
                           (self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["длина"] +
                            self.specification["Состав комплекта монтажного"]["Характеристики Уплотнитель зазоров"][
                                "нахлест"] * 2))
        sealant_length += (self.connections_dic["короткие соединения"] *
                           (self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["ширина"] +
                            self.specification["Состав комплекта монтажного"]["Характеристики Уплотнитель зазоров"][
                                "нахлест"] * 2))
        if self.need_down_frames:
            sealant_length *= 2

        sealant_length += ((self.connections_dic["длинные соединения"] + self.connections_dic["короткие соединения"]) *
                           self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                               "кол-во угловых стоек на одной стороне"] *
                           self.specification["Состав комплекта металлоконструкций"]["Характеристики Стойка угловая"][
                               "длина"])

        return sealant_length

    def count_mastic(self):
        connections_length = 0
        for var_walls_list in self.walls_list_list:
            for wall in var_walls_list[1]:
                wall_length = 0
                if wall.consists_from_short:
                    wall_length += (wall.num_of_frames *
                                    self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                                        "ширина"] +
                                    (wall.num_of_frames - 1) *
                                    self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                                        "зазор между рамами"])
                else:
                    wall_length += (wall.num_of_frames *
                                    self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                                        "длина"] +
                                    (wall.num_of_frames - 1) *
                                    self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"][
                                        "зазор между рамами"])

                wall_length *= 2

                wall.mastic = wall_length
                connections_length += wall_length

        if self.need_down_frames:
            connections_length += (
                                          self.connections_dic["длинные соединения"] *
                                          self.specification["Состав комплекта рам"][
                                              "Характеристики Рама универсальная"]["длина"] +
                                          self.connections_dic["короткие соединения"] *
                                          self.specification["Состав комплекта рам"][
                                              "Характеристики Рама универсальная"]["ширина"]) * 2
        else:
            connections_length += (
                    self.connections_dic["длинные соединения"] *
                    self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["длина"] +
                    self.connections_dic["короткие соединения"] *
                    self.specification["Состав комплекта рам"]["Характеристики Рама универсальная"]["ширина"])

        return (connections_length /
                self.specification["Состав комплекта монтажного"]["Характеристики Мастика"]["кол-во мм из одного кг"])

class ConnectedElem:
    def __init__(self, cur_number):
        self.cur_number = cur_number

        self.left_connected_number = 0
        self.left_elem_size = 0
        self.full_elem_num = 0
        self.right_elem_size = 0
        self.right_connected_number = 0


def connect_list(elem_list, min_size, overlap_size, start_size, small_size):
    res_list = []
    remain_list = []
    prev_size = start_size
    prev_number = -1
    num_of_elems = 0
    number_of_small_up_battens = 0
    number_of_scopes = 0
    number_of_jumps = 0
    if start_size != 0:
        num_of_elems += 1
        number_of_scopes += 1
    full_size = 0
    for closest_element in elem_list:
        full_size += closest_element[0]
        cur_elem = ConnectedElem(closest_element[1])
        cur_size = closest_element[0]
        init_size = cur_size
        if prev_size != 0:
            cur_size += math.ceil(cur_size - prev_size) * overlap_size
        else:
            cur_size += int(cur_size) * overlap_size

        right_size = cur_size - prev_size - int(cur_size - prev_size)
        if right_size < min_size:
            if prev_size == 0:
                if remain_list:
                    prev_number = remain_list[0]
                    prev_elem = list(filter(lambda x: x.cur_number == prev_number, res_list))[0]
                    prev_elem.left_connected_number = cur_elem.cur_number
                    cur_elem.left_connected_number = remain_list.pop(0)
                    number_of_jumps += 1
                else:
                    num_of_elems += 1
                    remain_list.append(cur_elem.cur_number)
                    cur_elem.left_connected_number = cur_elem.cur_number
                cur_elem.left_elem_size = 0.5
            else:
                if prev_size - (min_size - right_size) < min_size:
                    cur_size -= overlap_size
                    cur_elem.left_elem_size = 0
                    cur_elem.left_connected_number = cur_elem.cur_number
                    number_of_scopes += 1
                else:
                    prev_size = prev_size - (min_size - right_size)
                    number_of_scopes += 1
                    cur_elem.left_elem_size = prev_size
                    cur_size = init_size + math.ceil(init_size - prev_size) * overlap_size
                    if len(list(filter(lambda x: x.cur_number == prev_number, res_list))) != 0:
                        cur_elem.left_connected_number = prev_number
                        prev_elem = list(filter(lambda x: x.cur_number == prev_number, res_list))[0]
                        prev_elem.right_connected_number = cur_elem.cur_number
                    else:
                        cur_elem.left_connected_number = cur_elem.cur_number
        else:
            if prev_size == 0:
                cur_elem.left_elem_size = 0
                cur_elem.left_connected_number = cur_elem.cur_number
            else:
                cur_elem.left_elem_size = prev_size
                if len(list(filter(lambda x: x.cur_number == prev_number, res_list))) != 0:
                    cur_elem.left_connected_number = prev_number
                    prev_elem = list(filter(lambda x: x.cur_number == prev_number, res_list))[0]
                    prev_elem.right_connected_number = cur_elem.cur_number
                else:
                    cur_elem.left_connected_number = cur_elem.cur_number

        cur_elem.right_elem_size = (cur_size - cur_elem.left_elem_size -
                                    int(cur_size - cur_elem.left_elem_size))

        cur_elem.full_elem_num = round(cur_size - cur_elem.left_elem_size - cur_elem.right_elem_size)

        num_of_elems += cur_elem.full_elem_num

        cur_elem.right_connected_number = cur_elem.cur_number
        if 1 - cur_elem.right_elem_size < min_size or cur_elem.right_elem_size == 0:
            prev_size = 0
            prev_number = -1
            number_of_scopes += 1
        else:
            prev_size = 1 - cur_elem.right_elem_size
            prev_number = cur_elem.cur_number
        if cur_elem.right_elem_size != 0:
            num_of_elems += 1

        if cur_elem.left_elem_size < small_size and cur_elem.left_elem_size != 0:
            number_of_small_up_battens += 1

        if cur_elem.right_elem_size < small_size and cur_elem.right_elem_size != 0:
            number_of_small_up_battens += 1

        res_list.append(cur_elem)

    if (res_list[0].left_elem_size != 0 and res_list[-1].right_elem_size != 0 and
            res_list[0].left_elem_size + res_list[-1].right_elem_size <= 1):
        if res_list[0].left_elem_size + res_list[-1].right_elem_size == 1:
            number_of_scopes -= 1
        res_list[0].left_connected_number = res_list[-1].cur_number
        res_list[-1].right_connected_number = res_list[0].cur_number
        num_of_elems -= 1
    elif res_list[-1].right_elem_size != 0:
        number_of_scopes += 1

    min_elem_left = min(res_list, key=lambda x: x.left_elem_size if x.left_elem_size != 0 else 1).left_elem_size
    min_elem_right = min(res_list, key=lambda x: x.right_elem_size if x.right_elem_size != 0 else 1).right_elem_size
    min_elem = min(min_elem_left, min_elem_right)
    inverted_min_up_batten = 1 - min_elem

    return res_list, num_of_elems, number_of_jumps, number_of_scopes, number_of_small_up_battens, inverted_min_up_batten, full_size

def create_cyclic_lists(walls_list, initial_size, elem_size, step_size):
    cyclic_lists = []
    for i in range(int((elem_size - initial_size)
                       / step_size)):
        initial_size += step_size
        new_walls_list = copy.deepcopy(walls_list)
        if initial_size / elem_size == 1:
            cyclic_lists.append((new_walls_list, 0))
        else:
            cyclic_lists.append((new_walls_list, initial_size / elem_size))

    if cyclic_lists[-1][1] != 0:
        new_walls_list = copy.deepcopy(walls_list)
        cyclic_lists.append((new_walls_list, 0))
    return cyclic_lists


def select_walls_variants_lists(walls_variants_lists, func):
    min_walls_list = copy.deepcopy(walls_variants_lists)
    for i in range(len(walls_variants_lists[0]) - 1):
        i += 1
        min_val = func(min_walls_list, key=lambda x: x[i])[i]
        min_walls_list = [walls_list for walls_list in min_walls_list if walls_list[i] == min_val]

    return min_walls_list[0]


def nearest_share(elem_size, min_size):
    for i in range(math.ceil(1 / min_size), 0, -1):
        if 1 / i > elem_size:
            return 1 / i


def count_battens_screw(init_batten_length, screw_step):
    if init_batten_length == 0:
        return 0

    batten_length = 0
    num_of_batten_screw = 1

    if init_batten_length > 1:
        batten_length = 1
    else:
        batten_length = init_batten_length

    while batten_length > 0 and batten_length > 0.00000001:
        num_of_batten_screw += 1
        batten_length -= screw_step

    if init_batten_length > 1:
        num_of_batten_screw *= init_batten_length

    return num_of_batten_screw



def extract_features(type_name, spliter):

    parts = type_name.split(spliter)

    if len(parts) > 1:

        return parts[1]
    else:
        return ""



if __name__ == "__main__":

    basement_hight = int(input("Введите среднюю высоту цоколя в мм:"))

    need_down_frames = int(input("Нужны ли нижние рамы: (1 if True/0 if False)"))

    """

    frame_number_29 = 2

    nodes_dic_29 = {
        "одиночные соединения": 4,
        "двойные соединения": 2,
        "тройные соединения": 0,
        "четверные соединения": 0
    }

    connections_dic_29 = {
        "длинные соединения": 1,
        "короткие соединения": 0
    }

    walls_list_list_29 = [((0, 0), [
        (True, True, 2, True),
        (True, False, 1, True),
        (True, True, 2, True),
        (True, False, 1, True),
    ])]

    house = House(frame_number_29, nodes_dic_29, connections_dic_29, basement_hight, need_down_frames)

    house.add_wall_list_list(walls_list_list_29)
    """


    """
    frame_number_44 = 3

    nodes_dic_44 = {
        "одиночные соединения": 4,
        "двойные соединения": 4,
        "тройные соединения": 0,
        "четверные соединения": 0
    }

    connections_dic_44 = {
        "длинные соединения": 2,
        "короткие соединения": 0
    }

    walls_list_list_44 = [((0, 0), [
        (True, True, 3, True),
        (True, False, 1, True),
        (True, True, 3, True),
        (True, False, 1, True),
    ])]

    house = House(frame_number_44, nodes_dic_44, connections_dic_44, basement_hight, need_down_frames)

    house.add_wall_list_list(walls_list_list_44)
    """

    """
    frame_number_59 = 4

    nodes_dic_59 = {
        "одиночные соединения": 4,
        "двойные соединения": 6,
        "тройные соединения": 0,
        "четверные соединения": 0
    }

    connections_dic_59 = {
        "длинные соединения": 3,
        "короткие соединения": 0
    }

    walls_list_list_59 = [((0, 0) , [
        (True, True, 4, True),
        (True, False, 1, True),
        (True, True, 4, True),
        (True, False, 1, True),
    ])]

    house = House(frame_number_59, nodes_dic_59, connections_dic_59, basement_hight, need_down_frames)
    
    house.add_wall_list_list(walls_list_list_59)
    """

    """
    frame_number_74 = 5

    nodes_dic_74 = {
        "одиночные соединения": 5,
        "двойные соединения": 4,
        "тройные соединения": 1,
        "четверные соединения": 1
    }

    connections_dic_74 = {
        "длинные соединения": 3,
        "короткие соединения": 2
    }

    walls_list_list_74 = [((0, 0) , [
        (True, True, 2, True),
        (True, False, 1, False),
        (False, True, 1, True),
        (True, False, 1, True),
        (True, True, 3, True),
        (True, False, 2, True),
    ])]

    house = House(frame_number_74, nodes_dic_74, connections_dic_74, basement_hight, need_down_frames)

    house.add_wall_list_list(walls_list_list_74)
    """

    """
    frame_number_88 = 6

    nodes_dic_88 = {
        "одиночные соединения": 6,
        "двойные соединения": 4,
        "тройные соединения": 2,
        "четверные соединения": 1
    }

    connections_dic_88 = {
        "длинные соединения": 4,
        "короткие соединения": 2
    }

    walls_list_list_88 = [((0, 0) , [
        (True, True, 3, True),
        (True, False, 1, False),
        (False, True, 1, True),
        (True, False, 1, True),
        (True, True, 3, True),
        (True, False, 1, False),
        (False, True, 1, True),
        (True, False, 1, True),
    ])]

    house = House(frame_number_88, nodes_dic_88, connections_dic_88, basement_hight, need_down_frames)

    house.add_wall_list_list(walls_list_list_88)
    """


    frame_number_162 = 11

    nodes_dic_162 = {
        "одиночные соединения": 8,
        "двойные соединения": 8,
        "тройные соединения": 4,
        "четверные соединения": 2
    }

    connections_dic_162 = {
        "длинные соединения": 8,
        "короткие соединения": 4
    }

    walls_list_list_162 = [((0, 0) , [
        (True, True, 4, True),
        (True, False, 1, False),
        (False, True, 1, True),
        (True, False, 1, True),
        (True, True, 1, False),
        (False, False, 1, True),
        (True, True, 4, True),
        (True, False, 1, True),
        (True, True, 2, False),
        (False, False, 1, False),
        (False, True, 2, True),
        (True, False, 1, True),

    ])]

    house = House(frame_number_162, nodes_dic_162, connections_dic_162, basement_hight, need_down_frames)

    house.add_wall_list_list(walls_list_list_162)


    house.count_specification()
    house.count_price_and_weight()

    """
    Нужно вывести на экран 
        s = "Вес дома: " + str(house.financial_characteristics["Форматированный вес всех комплектов"]) + "кг." + "\n"
        s += "Цена дома: " + str(house.financial_characteristics["Форматированная розничная цена (с НДС)"]) + "р." + "\n"
    """

    #при нажатии кнопки выгрузки спецификации должна вызываться эта функция
    house.create_excel_specification_file()

    j = 0
